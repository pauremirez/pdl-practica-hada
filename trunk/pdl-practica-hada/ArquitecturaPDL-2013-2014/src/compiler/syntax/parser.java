
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 25 13:39:13 CET 2014
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 25 13:39:13 CET 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\047\002\000\002\003" +
    "\004\000\002\002\010\000\002\002\007\000\002\002\011" +
    "\000\002\002\011\000\002\046\004\000\002\046\004\000" +
    "\002\034\006\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\004\000\002\034\004\000\002\034" +
    "\003\000\002\034\005\000\002\034\004\000\002\034\004" +
    "\000\002\034\003\000\002\034\004\000\002\034\003\000" +
    "\002\034\003\000\002\007\003\000\002\007\004\000\002" +
    "\004\003\000\002\004\004\000\002\005\003\000\002\005" +
    "\004\000\002\006\003\000\002\006\004\000\002\010\010" +
    "\000\002\010\010\000\002\011\016\000\002\011\016\000" +
    "\002\011\016\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\013\003\000\002\013\003\000\002\014" +
    "\014\000\002\014\013\000\002\050\002\000\002\014\014" +
    "\000\002\014\012\000\002\014\011\000\002\033\012\000" +
    "\002\033\011\000\002\015\011\000\002\015\010\000\002" +
    "\020\003\000\002\020\004\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\023\007\000\002\043\003\000\002\043\003\000" +
    "\002\044\003\000\002\024\011\000\002\025\011\000\002" +
    "\025\013\000\002\026\006\000\002\027\003\000\002\027" +
    "\005\000\002\027\007\000\002\027\003\000\002\045\006" +
    "\000\002\036\007\000\002\037\003\000\002\037\005\000" +
    "\002\022\011\000\002\022\007\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\003\000\002\030\003\000" +
    "\002\030\005\000\002\030\007\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\003\000\002\031" +
    "\003\000\002\032\002\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\017\004\000\002\017\005\000" +
    "\002\016\003\000\002\016\005\000\002\041\005\000\002" +
    "\042\003\000\002\042\003\000\002\035\007\000\002\035" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\006\024\000\053\000\001\002\000\004\002" +
    "\367\001\002\000\006\024\010\053\006\001\002\000\004" +
    "\003\361\001\002\000\004\002\uffff\001\002\000\006\003" +
    "\360\053\357\001\002\000\006\003\012\034\013\001\002" +
    "\000\004\034\352\001\002\000\004\035\014\001\002\000" +
    "\004\017\015\001\002\000\014\006\031\014\025\024\010" +
    "\031\033\053\030\001\002\000\010\006\uffda\014\uffda\024" +
    "\uffda\001\002\000\014\006\uffea\014\uffea\024\uffea\031\uffea" +
    "\053\uffea\001\002\000\004\002\ufffd\001\002\000\012\006" +
    "\uffec\014\025\024\010\053\055\001\002\000\014\006\uffe8" +
    "\014\uffe8\024\uffe8\031\uffe8\053\uffe8\001\002\000\014\006" +
    "\uffee\014\025\024\010\031\033\053\055\001\002\000\004" +
    "\034\337\001\002\000\004\053\257\001\002\000\004\006" +
    "\031\001\002\000\012\006\uffe6\014\uffe6\024\uffe6\053\uffe6" +
    "\001\002\000\006\040\056\042\247\001\002\000\014\012" +
    "\117\015\113\025\105\032\104\053\115\001\002\000\010" +
    "\006\uffeb\014\025\024\010\001\002\000\004\053\065\001" +
    "\002\000\014\006\ufff2\014\025\024\010\031\033\053\030" +
    "\001\002\000\010\007\042\016\040\053\041\001\002\000" +
    "\010\006\uffd9\014\uffd9\024\uffd9\001\002\000\010\006\uffe4" +
    "\014\uffe4\024\uffe4\001\002\000\004\041\045\001\002\000" +
    "\004\041\044\001\002\000\004\041\043\001\002\000\012" +
    "\006\uffdc\014\uffdc\024\uffdc\053\uffdc\001\002\000\012\006" +
    "\uffdb\014\uffdb\024\uffdb\053\uffdb\001\002\000\012\006\uffdd" +
    "\014\uffdd\024\uffdd\053\uffdd\001\002\000\014\006\uffe9\014" +
    "\uffe9\024\uffe9\031\uffe9\053\uffe9\001\002\000\012\006\ufff3" +
    "\014\025\024\010\053\055\001\002\000\010\006\ufff4\014" +
    "\025\024\010\001\002\000\012\014\025\024\010\031\033" +
    "\053\055\001\002\000\014\006\uffe7\014\uffe7\024\uffe7\031" +
    "\uffe7\053\uffe7\001\002\000\012\006\ufff5\014\025\024\010" +
    "\053\055\001\002\000\010\006\ufff6\014\025\024\010\001" +
    "\002\000\006\040\056\042\057\001\002\000\004\053\055" +
    "\001\002\000\012\007\uff9f\016\uff9f\023\uff9f\053\uff9f\001" +
    "\002\000\012\007\uff9e\016\uff9e\023\uff9e\053\uff9e\001\002" +
    "\000\010\006\uffe3\014\uffe3\024\uffe3\001\002\000\012\006" +
    "\uffe5\014\uffe5\024\uffe5\053\uffe5\001\002\000\010\006\ufff8" +
    "\014\025\024\010\001\002\000\010\006\ufff7\014\025\024" +
    "\010\001\002\000\004\017\066\001\002\000\004\005\067" +
    "\001\002\000\004\034\070\001\002\000\004\054\071\001" +
    "\002\000\004\055\072\001\002\000\004\054\073\001\002" +
    "\000\004\035\074\001\002\000\004\021\075\001\002\000" +
    "\010\007\100\016\077\053\076\001\002\000\004\041\103" +
    "\001\002\000\004\041\102\001\002\000\004\041\101\001" +
    "\002\000\014\006\uffdf\014\uffdf\024\uffdf\031\uffdf\053\uffdf" +
    "\001\002\000\014\006\uffe0\014\uffe0\024\uffe0\031\uffe0\053" +
    "\uffe0\001\002\000\014\006\uffde\014\uffde\024\uffde\031\uffde" +
    "\053\uffde\001\002\000\014\013\134\030\131\034\132\053" +
    "\135\054\161\001\002\000\004\034\232\001\002\000\020" +
    "\011\uffcc\012\uffcc\015\uffcc\025\uffcc\026\uffcc\032\uffcc\053" +
    "\uffcc\001\002\000\004\051\uffbc\001\002\000\014\012\227" +
    "\015\113\025\105\032\104\053\115\001\002\000\020\011" +
    "\uffce\012\uffce\015\uffce\025\uffce\026\uffce\032\uffce\053\uffce" +
    "\001\002\000\020\011\uffc9\012\uffc9\015\uffc9\025\uffc9\026" +
    "\uffc9\032\uffc9\053\uffc9\001\002\000\014\013\134\030\131" +
    "\034\132\053\135\054\161\001\002\000\004\051\203\001" +
    "\002\000\010\034\125\051\uffbf\052\124\001\002\000\020" +
    "\011\uffca\012\uffca\015\uffca\025\uffca\026\uffca\032\uffca\053" +
    "\uffca\001\002\000\004\053\122\001\002\000\020\011\uffc8" +
    "\012\uffc8\015\uffc8\025\uffc8\026\uffc8\032\uffc8\053\uffc8\001" +
    "\002\000\020\011\uffcb\012\uffcb\015\uffcb\025\uffcb\026\uffcb" +
    "\032\uffcb\053\uffcb\001\002\000\004\041\123\001\002\000" +
    "\012\002\uff97\006\uff97\014\uff97\024\uff97\001\002\000\004" +
    "\053\200\001\002\000\014\013\134\030\131\034\132\053" +
    "\135\054\130\001\002\000\034\004\uffa6\020\uffa6\022\uffa6" +
    "\027\uffa6\035\uffa6\040\uffa6\041\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\001\002\000\004\035\176" +
    "\001\002\000\026\004\uffab\022\uffab\035\175\040\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\001\002" +
    "\000\034\004\uffa5\020\uffa5\022\uffa5\027\uffa5\035\uffa5\040" +
    "\uffa5\041\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\001\002\000\014\013\134\030\131\034\132\053" +
    "\135\054\161\001\002\000\026\004\156\022\157\035\uffb9" +
    "\040\151\043\152\044\153\045\154\046\160\047\155\050" +
    "\150\001\002\000\034\004\uffa4\020\uffa4\022\uffa4\027\uffa4" +
    "\035\uffa4\040\uffa4\041\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\001\002\000\040\004\uffac\020\uffac" +
    "\022\uffac\027\uffac\034\141\035\uffac\040\uffac\041\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\052\140" +
    "\001\002\000\034\004\uffa8\020\uffa8\022\uffa8\027\uffa8\035" +
    "\uffa8\040\uffa8\041\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\001\002\000\034\004\uffa7\020\uffa7\022" +
    "\uffa7\027\uffa7\035\uffa7\040\uffa7\041\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\050\uffa7\001\002\000\004\053" +
    "\145\001\002\000\014\013\134\030\131\034\132\053\135" +
    "\054\130\001\002\000\004\035\143\001\002\000\004\041" +
    "\144\001\002\000\034\004\uffba\020\uffba\022\uffba\027\uffba" +
    "\035\uffba\040\uffba\041\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\001\002\000\036\004\uffaa\020\uffaa" +
    "\022\uffaa\027\uffaa\035\uffaa\040\uffaa\041\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\052\146\001\002" +
    "\000\004\053\147\001\002\000\034\004\uffa9\020\uffa9\022" +
    "\uffa9\027\uffa9\035\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\047\uffa9\050\uffa9\001\002\000\014\013" +
    "\134\030\131\034\132\053\135\054\161\001\002\000\014" +
    "\013\134\030\131\034\132\053\135\054\161\001\002\000" +
    "\014\013\134\030\131\034\132\053\135\054\161\001\002" +
    "\000\014\013\134\030\131\034\132\053\135\054\161\001" +
    "\002\000\014\013\134\030\131\034\132\053\135\054\161" +
    "\001\002\000\014\013\134\030\131\034\132\053\135\054" +
    "\161\001\002\000\014\013\134\030\131\034\132\053\135" +
    "\054\161\001\002\000\014\013\134\030\131\034\132\053" +
    "\135\054\161\001\002\000\014\013\134\030\131\034\132" +
    "\053\135\054\161\001\002\000\034\004\uffab\020\uffab\022" +
    "\uffab\027\uffab\035\uffab\040\uffab\041\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\001\002\000\034\004" +
    "\uffaf\020\uffaf\022\157\027\uffaf\035\uffaf\040\uffaf\041\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\150\001" +
    "\002\000\034\004\uffb3\020\uffb3\022\uffb3\027\uffb3\035\uffb3" +
    "\040\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\001\002\000\034\004\uffb4\020\uffb4\022\157" +
    "\027\uffb4\035\uffb4\040\uffb4\041\uffb4\043\uffb4\044\153\045" +
    "\154\046\160\047\155\050\150\001\002\000\034\004\uffae" +
    "\020\uffae\022\157\027\uffae\035\uffae\040\uffae\041\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\150\001\002" +
    "\000\034\004\uffb1\020\uffb1\022\157\027\uffb1\035\uffb1\040" +
    "\uffb1\041\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\150\001\002\000\034\004\uffb0\020\uffb0\022\157\027" +
    "\uffb0\035\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\150\001\002\000\034\004\uffb5\020" +
    "\uffb5\022\157\027\uffb5\035\uffb5\040\uffb5\041\uffb5\043\uffb5" +
    "\044\153\045\154\046\160\047\155\050\150\001\002\000" +
    "\004\035\uffb8\001\002\000\034\004\uffb2\020\uffb2\022\uffb2" +
    "\027\uffb2\035\uffb2\040\uffb2\041\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\001\002\000\024\004\156" +
    "\022\157\035\174\043\152\044\153\045\154\046\160\047" +
    "\155\050\150\001\002\000\034\004\uffad\020\uffad\022\uffad" +
    "\027\uffad\035\uffad\040\uffad\041\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\001\002\000\036\004\uffbb" +
    "\020\uffbb\022\uffbb\027\uffbb\035\uffbb\040\uffbb\041\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\001\002\000\004\041\177\001\002\000\020\011\uffb6\012" +
    "\uffb6\015\uffb6\025\uffb6\026\uffb6\032\uffb6\053\uffb6\001\002" +
    "\000\006\051\uffbe\052\201\001\002\000\004\053\202\001" +
    "\002\000\004\051\uffbd\001\002\000\014\013\134\030\131" +
    "\034\132\053\205\054\161\001\002\000\024\004\156\022" +
    "\157\041\212\043\152\044\153\045\154\046\160\047\155" +
    "\050\150\001\002\000\030\004\uffac\022\uffac\034\206\041" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\052\140\001\002\000\014\013\134\030\131\034\132\053" +
    "\135\054\130\001\002\000\004\035\210\001\002\000\004" +
    "\041\211\001\002\000\042\004\uffba\011\uffb7\012\uffb7\015" +
    "\uffb7\022\uffba\025\uffb7\026\uffb7\032\uffb7\041\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\053\uffb7\001" +
    "\002\000\020\011\uffc0\012\uffc0\015\uffc0\025\uffc0\026\uffc0" +
    "\032\uffc0\053\uffc0\001\002\000\024\004\156\022\157\027" +
    "\214\043\152\044\153\045\154\046\160\047\155\050\150" +
    "\001\002\000\012\015\113\025\105\032\104\053\115\001" +
    "\002\000\016\011\217\012\220\015\113\025\105\032\104" +
    "\053\115\001\002\000\020\011\uffcd\012\uffcd\015\uffcd\025" +
    "\uffcd\026\uffcd\032\uffcd\053\uffcd\001\002\000\012\015\113" +
    "\025\105\032\104\053\115\001\002\000\004\015\221\001" +
    "\002\000\004\041\222\001\002\000\020\011\uffc2\012\uffc2" +
    "\015\uffc2\025\uffc2\026\uffc2\032\uffc2\053\uffc2\001\002\000" +
    "\014\012\224\015\113\025\105\032\104\053\115\001\002" +
    "\000\004\015\225\001\002\000\004\041\226\001\002\000" +
    "\020\011\uffc1\012\uffc1\015\uffc1\025\uffc1\026\uffc1\032\uffc1" +
    "\053\uffc1\001\002\000\004\053\230\001\002\000\004\041" +
    "\231\001\002\000\012\002\uff98\006\uff98\014\uff98\024\uff98" +
    "\001\002\000\016\013\134\030\131\034\132\053\135\054" +
    "\161\056\236\001\002\000\004\035\237\001\002\000\004" +
    "\035\uffc6\001\002\000\024\004\156\022\157\035\uffc5\043" +
    "\152\044\153\045\154\046\160\047\155\050\150\001\002" +
    "\000\004\035\uffc4\001\002\000\004\041\240\001\002\000" +
    "\020\011\uffc7\012\uffc7\015\uffc7\025\uffc7\026\uffc7\032\uffc7" +
    "\053\uffc7\001\002\000\024\004\156\020\242\022\157\043" +
    "\152\044\153\045\154\046\160\047\155\050\150\001\002" +
    "\000\012\015\113\025\105\032\104\053\115\001\002\000" +
    "\014\012\244\015\113\025\105\032\104\053\115\001\002" +
    "\000\004\020\245\001\002\000\004\041\246\001\002\000" +
    "\020\011\uffc3\012\uffc3\015\uffc3\025\uffc3\026\uffc3\032\uffc3" +
    "\053\uffc3\001\002\000\012\007\uff9f\010\250\016\uff9f\053" +
    "\uff9f\001\002\000\004\051\251\001\002\000\010\013\134" +
    "\030\131\054\253\001\002\000\004\041\255\001\002\000" +
    "\004\041\254\001\002\000\014\006\uffe2\014\uffe2\024\uffe2" +
    "\031\uffe2\053\uffe2\001\002\000\014\006\uffe1\014\uffe1\024" +
    "\uffe1\031\uffe1\053\uffe1\001\002\000\004\002\ufffe\001\002" +
    "\000\006\003\260\034\261\001\002\000\004\026\333\001" +
    "\002\000\006\035\263\053\055\001\002\000\004\035\323" +
    "\001\002\000\004\026\277\001\002\000\012\007\uffa3\016" +
    "\uffa3\023\270\053\uffa3\001\002\000\006\035\uff9d\041\266" +
    "\001\002\000\004\053\055\001\002\000\004\035\uff9c\001" +
    "\002\000\010\007\uff9a\016\uff9a\053\uff9a\001\002\000\010" +
    "\007\uff99\016\uff99\053\uff99\001\002\000\010\007\276\016" +
    "\274\053\273\001\002\000\010\017\uffa0\035\uffa0\041\uffa0" +
    "\001\002\000\010\017\uffa2\035\uffa2\041\uffa2\001\002\000" +
    "\006\035\uff9b\041\uff9b\001\002\000\010\017\uffa1\035\uffa1" +
    "\041\uffa1\001\002\000\010\007\276\016\274\053\273\001" +
    "\002\000\004\017\301\001\002\000\014\006\304\014\025" +
    "\024\010\031\033\053\030\001\002\000\010\006\uffd4\014" +
    "\uffd4\024\uffd4\001\002\000\004\006\304\001\002\000\014" +
    "\015\113\025\105\026\306\032\104\053\115\001\002\000" +
    "\014\015\113\025\105\026\314\032\104\053\115\001\002" +
    "\000\014\013\134\030\131\034\132\053\135\054\161\001" +
    "\002\000\024\004\156\022\157\041\310\043\152\044\153" +
    "\045\154\046\160\047\155\050\150\001\002\000\004\012" +
    "\311\001\002\000\004\053\312\001\002\000\004\041\313" +
    "\001\002\000\010\006\uffd1\014\uffd1\024\uffd1\001\002\000" +
    "\014\013\134\030\131\034\132\053\135\054\161\001\002" +
    "\000\024\004\156\022\157\041\316\043\152\044\153\045" +
    "\154\046\160\047\155\050\150\001\002\000\004\012\317" +
    "\001\002\000\004\053\320\001\002\000\004\041\321\001" +
    "\002\000\010\006\uffd2\014\uffd2\024\uffd2\001\002\000\010" +
    "\006\uffd7\014\uffd7\024\uffd7\001\002\000\004\026\324\001" +
    "\002\000\010\007\276\016\274\053\273\001\002\000\004" +
    "\017\326\001\002\000\014\006\uffd6\014\025\024\010\031" +
    "\033\053\030\001\002\000\004\006\304\001\002\000\004" +
    "\006\304\001\002\000\010\006\uffd8\014\uffd8\024\uffd8\001" +
    "\002\000\010\006\uffd5\014\uffd5\024\uffd5\001\002\000\010" +
    "\007\276\016\274\053\273\001\002\000\004\017\335\001" +
    "\002\000\004\006\304\001\002\000\010\006\uffd3\014\uffd3" +
    "\024\uffd3\001\002\000\004\053\055\001\002\000\004\035" +
    "\341\001\002\000\004\017\342\001\002\000\014\006\031" +
    "\014\025\024\010\031\033\053\030\001\002\000\010\006" +
    "\uffcf\014\uffcf\024\uffcf\001\002\000\004\006\031\001\002" +
    "\000\010\006\uffd0\014\uffd0\024\uffd0\001\002\000\012\006" +
    "\ufff0\014\025\024\010\053\055\001\002\000\010\006\uffef" +
    "\014\025\024\010\001\002\000\010\006\ufff1\014\025\024" +
    "\010\001\002\000\010\006\uffed\014\025\024\010\001\002" +
    "\000\004\035\353\001\002\000\004\017\354\001\002\000" +
    "\012\014\025\024\010\031\033\053\030\001\002\000\004" +
    "\006\031\001\002\000\004\002\ufffc\001\002\000\006\003" +
    "\ufffa\034\ufffa\001\002\000\006\003\ufff9\034\ufff9\001\002" +
    "\000\004\034\362\001\002\000\004\035\363\001\002\000" +
    "\004\017\364\001\002\000\012\014\025\024\010\031\033" +
    "\053\030\001\002\000\004\006\031\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\006\003\003\047\004\001\001\000\002\001" +
    "\001\000\006\002\006\046\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\022\005\020\006\031\007\033\010\016\011\021\012" +
    "\026\013\036\014\035\015\015\017\034\034\025\035\017" +
    "\046\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\350\012\061\013\036\014\035" +
    "\015\015\017\034\046\023\001\001\000\002\001\001\000" +
    "\024\005\345\006\346\011\051\012\026\013\036\014\035" +
    "\015\015\017\034\046\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\020\107\021\110\022\117\023" +
    "\111\024\115\025\120\026\105\027\113\045\106\001\001" +
    "\000\012\013\060\014\035\015\015\046\023\001\001\000" +
    "\002\001\001\000\030\004\050\005\046\006\047\010\045" +
    "\011\021\012\026\013\036\014\035\015\015\017\034\046" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\063\012\061\013\036\014" +
    "\035\015\015\017\034\046\023\001\001\000\012\013\060" +
    "\014\035\015\015\046\023\001\001\000\024\005\052\006" +
    "\053\011\051\012\026\013\036\014\035\015\015\017\034" +
    "\046\023\001\001\000\002\001\001\000\020\006\062\012" +
    "\061\013\036\014\035\015\015\017\034\046\023\001\001" +
    "\000\012\013\060\014\035\015\015\046\023\001\001\000" +
    "\002\001\001\000\004\017\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\060\014\035\015\015\046\023\001\001\000\012" +
    "\013\060\014\035\015\015\046\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\240\031\136\036\135" +
    "\045\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\215\022\117\023\111\024\115" +
    "\025\120\026\105\027\113\045\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\212\031\136\036\135" +
    "\045\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\030\132\031\136\036\135\037\126\045\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\172\031\136\036\135" +
    "\045\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\030\132\031\136\036\135\037\141\045" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\171\031\136\036\135\045\125\001\001" +
    "\000\014\030\132\031\136\036\135\037\170\045\125\001" +
    "\001\000\012\030\167\031\136\036\135\045\125\001\001" +
    "\000\012\030\166\031\136\036\135\045\125\001\001\000" +
    "\012\030\165\031\136\036\135\045\125\001\001\000\012" +
    "\030\164\031\136\036\135\045\125\001\001\000\012\030" +
    "\163\031\136\036\135\045\125\001\001\000\012\030\162" +
    "\031\136\036\135\045\125\001\001\000\012\030\161\031" +
    "\136\036\135\045\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\203\031\136\036\135\045\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\030\132\031" +
    "\136\036\135\037\206\045\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\020\214\021\110\022\117\023\111" +
    "\024\115\025\120\026\105\027\113\045\106\001\001\000" +
    "\022\021\215\022\117\023\111\024\115\025\120\026\105" +
    "\027\113\045\106\001\001\000\002\001\001\000\024\020" +
    "\222\021\110\022\117\023\111\024\115\025\120\026\105" +
    "\027\113\045\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\215\022\117\023\111" +
    "\024\115\025\120\026\105\027\113\045\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\030" +
    "\234\031\136\036\135\043\232\044\233\045\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\020\242\021\110\022\117\023\111\024" +
    "\115\025\120\026\105\027\113\045\106\001\001\000\022" +
    "\021\215\022\117\023\111\024\115\025\120\026\105\027" +
    "\113\045\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\261\017\263" +
    "\041\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\270\042\271\001\001\000\002\001\001\000\010" +
    "\016\266\017\263\041\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\277\001\001\000\002\001\001" +
    "\000\036\004\022\005\020\006\031\007\033\010\016\011" +
    "\021\012\026\013\036\014\035\015\015\017\034\033\301" +
    "\034\302\046\023\001\001\000\002\001\001\000\004\033" +
    "\321\001\001\000\024\020\304\021\110\022\117\023\111" +
    "\024\115\025\120\026\105\027\113\045\106\001\001\000" +
    "\022\021\215\022\117\023\111\024\115\025\120\026\105" +
    "\027\113\045\106\001\001\000\012\030\306\031\136\036" +
    "\135\045\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\030\314\031\136\036\135\045\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\324\001\001\000\002\001\001\000\036\004" +
    "\022\005\020\006\031\007\033\010\016\011\021\012\026" +
    "\013\036\014\035\015\015\017\034\034\327\046\023\050" +
    "\326\001\001\000\004\033\331\001\001\000\004\033\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\333\001\001\000\002\001\001\000\004\033\335\001\001" +
    "\000\002\001\001\000\010\016\337\017\263\041\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\022" +
    "\005\020\006\031\007\033\010\016\011\021\012\026\013" +
    "\036\014\035\015\015\017\034\034\343\035\342\046\023" +
    "\001\001\000\002\001\001\000\004\035\344\001\001\000" +
    "\002\001\001\000\020\006\347\012\061\013\036\014\035" +
    "\015\015\017\034\046\023\001\001\000\012\013\060\014" +
    "\035\015\015\046\023\001\001\000\012\013\060\014\035" +
    "\015\015\046\023\001\001\000\012\013\060\014\035\015" +
    "\015\046\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\022\005\020\006\031\007\033\010\016\011" +
    "\021\012\026\013\036\014\035\015\015\017\034\034\354" +
    "\046\023\001\001\000\004\035\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\022\005" +
    "\020\006\031\007\033\010\016\011\021\012\026\013\036" +
    "\014\035\015\015\017\034\034\364\046\023\001\001\000" +
    "\004\035\365\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
		Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	//FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo ::= BEGIN END ID PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpo ::= BEGIN listaSentencias END ID PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // modo ::= vacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // modo ::= OUT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametro ::= idParametros modo tipos 
            {
              ListaObjetos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	syntaxErrorManager.syntaxInfo ("Parametros ID: " + id);
	syntaxErrorManager.syntaxInfo ("Parametros TIPO: " + t);
	
	SymbolParameter parametro=new SymbolParameter (scopeManager.getCurrentScope(),id.getLexema(),scopeManager.searchType(t.toString()));
	
/*	ListaObjetos lista = new ListaObjetos(id);
    for (int i=0;i<lista.size();i++){
    	syntaxErrorManager.syntaxInfo ("lista.get(i)"+lista.get(i));
    	//Parametro p = (Parametro) lista.get(i);
       	//p.setReferencia(true);
		//p.setTipo(scopeManager.searchType(t.toString()));
   	}*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros ::= parametro PUNTOYCOMA parametros 
            {
              ListaObjetos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros ::= parametro 
            {
              ListaObjetos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // idParametros ::= ID COMA idParametros 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion listParam = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   	// Añadir IDs a lista objetos Variables
   	ListaObjetos list = new ListaObjetos(listParam);
   	Var var = new Var (id.getLexema(), 0, id.getLine(), id.getColumn());
   	list.add(var);
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idParametros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // idParametros ::= ID DOSPUNTOS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
   // Añadir IDs a lista objetos Variables
	ListaObjetos list = new ListaObjetos();
    Var var = new Var (id.getLexema(), null, id.getLine(), id.getColumn());
    list.add(var);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idParametros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipos ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="BOOLEAN"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // vacio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vacio",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipoBooleano ::= FALSE 
            {
              Token RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoBooleano",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipoBooleano ::= TRUE 
            {
              Token RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoBooleano",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= vector 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= tipoBooleano 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= sentenciaFuncion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= ID PUNTO ID PUNTO ID 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= ID PUNTO ID 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	String name= id.getLexema();
	if(scopeManager.containsSymbol (name)){
		SymbolIF sId=scopeManager.searchSymbol(name);
		TypeIF type=sId.getType();
		RESULT= new Expresion (type);
	}else{ 
		//semanticErrorManager.semanticFatalError("Tipos incompatibles");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= PARENTESISIZQ expresion PARENTESISDER 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion DISTINTOQUE expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion IGUALQUE expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion MENORQUE expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion MAYORQUE expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciaProcedimiento ::= ID PARENTESISIZQ lista_parametros_llamada PARENTESISDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaProcedimiento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciaProcedimiento ::= idTipos ASIGNACION ID PARENTESISIZQ lista_parametros_llamada PARENTESISDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaProcedimiento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lista_parametros_llamada ::= expresion COMA lista_parametros_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros_llamada",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lista_parametros_llamada ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros_llamada",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentenciaFuncion ::= ID PARENTESISIZQ lista_parametros_llamada PARENTESISDER PUNTOYCOMA 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // vector ::= ID PARENTESISIZQ ENTERO PARENTESISDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // idTipos ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idTipos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // idTipos ::= ID PUNTO ID PUNTO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idTipos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // idTipos ::= ID PUNTO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idTipos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // idTipos ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idTipos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentenciaAsignacion ::= idTipos ASIGNACION expresion PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentenciaIf ::= IF expresion THEN listaSentencias ELSE listaSentencias END IF PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentenciaIf ::= IF expresion THEN listaSentencias END IF PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentenciaWhile ::= WHILE expresion LOOP listaSentencias END LOOP PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cadenaCaracteres ::= CARACTERESCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadenaCaracteres",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametroPutLine ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroPutLine",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametroPutLine ::= cadenaCaracteres 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroPutLine",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaPutLine ::= PUTLINE PARENTESISIZQ parametroPutLine PARENTESISDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaPutLine",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= sentenciaProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= sentenciaPutLine 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listaSentencias ::= listaSentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listaSentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // procedimiento ::= procedure PARENTESISIZQ parametros PARENTESISDER IS cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // procedimiento ::= procedure PARENTESISIZQ parametros PARENTESISDER IS cabecera cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpoFuncion ::= BEGIN RETURN expresion PUNTOYCOMA END ID PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpoFuncion ::= BEGIN listaSentencias RETURN expresion PUNTOYCOMA END ID PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funcion ::= FUNCTION ID error RETURN tipos IS cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
		syntaxErrorManager.syntaxFatalError("001. Faltan los DOS PARENTESIS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funcion ::= FUNCTION ID PARENTESISIZQ PARENTESISDER RETURN tipos IS cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerpFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cuerpFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funcion ::= FUNCTION ID PARENTESISIZQ parametros PARENTESISDER RETURN tipos IS NT$1 cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int parameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int parameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ListaObjetos parame = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$1 ::= 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaObjetos parame = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

	String name=id.getLexema();
	// la funcion ha sido declarada
    if (scopeManager.containsSymbol(name) && !scopeManager.containsType(name)) {
		semanticErrorManager.semanticFatalError("La funcion "+name+" en la linea: "+id.getLine()+" ya ha sido declarada o el tipo no ha sido declarado");
    }else{ 
                                
		// Crear FUNCION en ambito (scope, TypeTable y SymbolTable)
		ScopeIF scope = scopeManager.getCurrentScope();
        TypeTableIF tableTypes = scope.getTypeTable();
	  	SymbolTableIF tableSymbols = scope.getSymbolTable();
	  	
	  	// añadir funcion a TT
        TypeFunction typeFunction = new TypeFunction(scope, name);
							
		// añadir funcion a TS
        SymbolFunction symbolFunction = new SymbolFunction(scope,name,scopeManager.searchType(t.toString()));
							
		// NUEVO ambito para funcion y tabla TS y TT
		ScopeIF scope1 = scopeManager.openScope(name); 
		
		tableTypes = scope1.getTypeTable();
		tableSymbols = scope1.getSymbolTable();
		
		// Grabo tipo retorno 
		TypeIF typeIf=scopeManager.searchType(t.toString());
		typeFunction.setTipoRetorno(typeIf);
		
		// Grabo parametros funcion
	/*	for (SymbolParameter p:param.getParameters()){
			tableSymbols(p.getName(),p);
			typeFunction.addParameterType(p.getType());
		}
*/

		//ArrayList parameters = new ArrayList(Utilities.ordenaParametros(param)); //--> !!!!ERROR!!!!                      
        /*for (int i=0; i<parameters.size(); i++){
        	
           Parametro p = (Parametro) parameters.get(i);
           SymbolVariable symbolVariable = new SymbolVariable (scopeManager.getCurrentScope(), p.getNombre(), p.getTipo());
           
           // Creo lista ordenada de parametros en el PROCEDIMIENTO.
           typeFunction.setTypeParametro(p.getColumna(),p.getTipo()); 
           // Fijar paso parametros Ref/Valor en Symbolvar
           symbolVariable.setReferencia(p.getReferencia());
           tableSymbols.addSymbol(p.getNombre(),symbolVariable);                                  	
           typeFunction.setParametro(symbolVariable);
        } 
       */
       syntaxErrorManager.syntaxInfo ("*******lista de parametros funcion: "+parame);
       
       typeFunction.setHayRetorno(true);
       
       tableTypes.addType(name, typeFunction);
       tableSymbols.addSymbol(name, symbolFunction);
     }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= FUNCTION ID PARENTESISIZQ PARENTESISDER RETURN tipos IS cabecera cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cabFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cabFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cabFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cuerpFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerpFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cuerpFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= FUNCTION ID PARENTESISIZQ parametros PARENTESISDER RETURN tipos IS cabecera cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ListaObjetos param = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cabFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cabFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cabFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cuerpFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerpFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cuerpFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionSubPrograma ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubPrograma",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionSubPrograma ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubPrograma",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionVariable ::= idParametros ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion list = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tableSymbol=scope.getSymbolTable();
	TypeTableIF tableType=scope.getTypeTable();

	//Añadir el tipo de variable a la lista
	ListaObjetos var=new ListaObjetos(list);
	for(int i=var.size()-1; i>=0;i--){
		Var v=(Var)var.get(i);
		//Comprobar que no esté definido el mismo ámbito
		if(!scope.getSymbolTable().containsSymbol(v.getName())){
			SymbolVariable symbolVariable=new SymbolVariable(scope, v.getName(), scopeManager.searchType("INTEGER"));
			tableSymbol.addSymbol(v.getName(),symbolVariable);
			if(tableType.getType(type.getLexema()) instanceof TypeRecord){
				TypeRecord typeRecord = (TypeRecord) symbolVariable.getType();
			}
		}else{
			semanticErrorManager.semanticFatalError("La variable "+v.getName()+" en la linea "+v.getLine()+" y columna "+v.getColumn()+" ya ha sido declarada");
		}
	}
	if(!scopeManager.containsType(type.getLexema())){
		semanticErrorManager.semanticFatalError("La variable "+type.getLexema()+" en la linea "+type.getLine()+" y columna "+type.getColumn()+" no ha sido declarada");
	}else{
		TypeIF typeIf=scopeManager.searchType(type.getLexema());
		if(!(typeIf instanceof TypeRecord) && !(typeIf instanceof TypeSet)){
			semanticErrorManager.semanticFatalError("La variable "+type.getLexema()+" en la linea "+type.getLine()+" y columna "+type.getColumn()+" no es del tipo RECORD/SET");
		}
	}	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionVariable ::= idParametros BOOLEAN PUNTOYCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion list = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tableSymbol=scope.getSymbolTable();
	
	//Añadir el tipo de variable a la lista
	ListaObjetos var=new ListaObjetos(list);
	for(int i=var.size()-1; i>=0;i--){
		Var v=(Var)var.get(i);
		//Comprobar que no esté definido el mismo ámbito
		if(!scope.getSymbolTable().containsSymbol(v.getName())){
			SymbolVariable symbolVariable=new SymbolVariable(scope, v.getName(), scopeManager.searchType("BOOLEAN"));
			tableSymbol.addSymbol(v.getName(),symbolVariable);
		}else{
			semanticErrorManager.semanticFatalError("La variable "+v.getName()+" en la linea "+v.getLine()+" y columna "+v.getColumn()+" ya ha sido declarada");
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionVariable ::= idParametros INTEGER PUNTOYCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion list = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tableSymbol=scope.getSymbolTable();

	//Añadir el tipo de variable a la lista
	ListaObjetos var=new ListaObjetos(list);
	for(int i=var.size()-1; i>=0;i--){
		Var v=(Var)var.get(i);
		//Comprobar que no esté definido el mismo ámbito
		if(!scope.getSymbolTable().containsSymbol(v.getName())){
			SymbolVariable symbolVariable=new SymbolVariable(scope, v.getName(), scopeManager.searchType("INTEGER"));
			tableSymbol.addSymbol(v.getName(),symbolVariable);
		}else{
			semanticErrorManager.semanticFatalError("La variable "+v.getName()+" en la linea "+v.getLine()+" y columna "+v.getColumn()+" ya ha sido declarada");
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionTipo ::= TYPE ID IS ARRAY PARENTESISIZQ ENTERO PUNTOPUNTO ENTERO PARENTESISDER OF ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token value1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token value2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token typeId = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si el tipo está declarado en el ambito --> error: ya ha sido declarado
	//si no --> declararlo	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" ya ha sido declarado");
	}else{
		TypeTableIF tableType=scope.getTypeTable();
		TypeSet typeSet =new TypeSet (scope, name);
		typeSet.setValIni (Integer.parseInt(value1.getLexema()));
		typeSet.setValFin (Integer.parseInt(value2.getLexema()));
		tableType.addType(name,typeSet);
		TypeIF typeVar=scopeManager.searchType(typeId.getLexema());
		if(!(typeVar instanceof TypeRecord) && !(typeVar instanceof TypeSet)){
			semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" no es del tipo RECORD/SET");
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionTipo ::= TYPE ID IS ARRAY PARENTESISIZQ ENTERO PUNTOPUNTO ENTERO PARENTESISDER OF BOOLEAN PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token value1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token value2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si el tipo está declarado en el ambito --> error: ya ha sido declarado
	//si no --> declararlo	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" ya ha sido declarado");
	}else{
		TypeTableIF tableType=scope.getTypeTable();
		TypeSet typeSet =new TypeSet (scope, name);
		typeSet.setValIni (Integer.parseInt(value1.getLexema()));
		typeSet.setValFin (Integer.parseInt(value2.getLexema()));
		tableType.addType(name,typeSet);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionTipo ::= TYPE ID IS ARRAY PARENTESISIZQ ENTERO PUNTOPUNTO ENTERO PARENTESISDER OF INTEGER PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token value1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token value2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si el tipo está declarado en el ambito --> error: ya ha sido declarado
	//si no --> declararlo	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" ya ha sido declarado");
	}else{
		TypeTableIF tableType=scope.getTypeTable();
		TypeSet typeSet =new TypeSet (scope, name);
		typeSet.setValIni (Integer.parseInt(value1.getLexema()));
		typeSet.setValFin (Integer.parseInt(value2.getLexema()));
		tableType.addType(name,typeSet);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracionConstanteSimbolica ::= ID DOSPUNTOS CONSTANT ASIGNACION tipoBooleano PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si la cte está declarada en el ambito --> error: ya ha sido declarada
	//si no --> declararla	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("La CONSTANTE "+name+" en la linea "+id.getLine()+" ya ha sido declarada");
	}else{
		SymbolTableIF tableSymbol=scope.getSymbolTable();
		SymbolConstant constantSymbol=new SymbolConstant(scope,name, scopeManager.searchType("BOOLEAN"));
		if (valor.getLexema().equalsIgnoreCase("TRUE")) 
			constantSymbol.setValue(1);
		else 
			constantSymbol.setValue(0);
		tableSymbol.addSymbol(name,constantSymbol);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstanteSimbolica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionConstanteSimbolica ::= ID DOSPUNTOS CONSTANT ASIGNACION ENTERO PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String name=id.getLexema();
	SymbolTableIF sTable=scopeManager.getCurrentScope().getSymbolTable();
	
	//si la cte está declarada en el ambito --> error: ya ha sido declarada
	//si no --> declararla	
	if(sTable.containsSymbol(name)){
		semanticErrorManager.semanticFatalError("La CONSTANTE "+name+" en la linea "+id.getLine()+" ya ha sido declarada");
	}else{
		SymbolConstant sc= new SymbolConstant (scopeManager.getCurrentScope(),name,scopeManager.searchType("INTEGER"));
		sTable.addSymbol(name,sc);
		sc.setValue(Integer.parseInt(value.getLexema()));
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstanteSimbolica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // seccionSubProgramas ::= seccionSubProgramas declaracionSubPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubProgramas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // seccionSubProgramas ::= declaracionSubPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubProgramas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // seccionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seccionTipos ::= seccionTipos declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // seccionTipos ::= declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // seccionConstantesSimbolicas ::= seccionConstantesSimbolicas declaracionConstanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantesSimbolicas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // seccionConstantesSimbolicas ::= declaracionConstanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantesSimbolicas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cabecera ::= seccionSubProgramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cabecera ::= seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cabecera ::= seccionVariables seccionSubProgramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cabecera ::= seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cabecera ::= seccionTipos seccionSubProgramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cabecera ::= seccionTipos seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cabecera ::= seccionTipos seccionVariables seccionSubProgramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cabecera ::= seccionConstantesSimbolicas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cabecera ::= seccionConstantesSimbolicas seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera ::= seccionConstantesSimbolicas seccionSubProgramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cabecera ::= seccionConstantesSimbolicas seccionTipos seccionVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cabecera ::= seccionConstantesSimbolicas seccionTipos seccionSubProgramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cabecera ::= seccionConstantesSimbolicas seccionVariables seccionSubProgramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cabecera ::= seccionConstantesSimbolicas seccionTipos seccionVariables seccionSubProgramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // procedure ::= PROCEDURE error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("002. Error en el nombre del programa");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // procedure ::= PROCEDURE ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	String name=id.getLexema();
	scopeManager.openScope(name);
	
	//Insertar todos los TypesSimple en la TT
	ScopeIF scope = scopeManager.getCurrentScope();
	TypeTableIF tableTypes =scope.getTypeTable();
	TypeInteger typeInteger = new TypeInteger(scope);
	TypeBoolean typeBoolean = new TypeBoolean(scope);
	tableTypes.addType(typeInteger);
	tableTypes.addType(typeBoolean);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom ::= ID error PARENTESISIZQ PARENTESISDER IS cabecera cuerpo 
            {
              Axiom RESULT =null;
		syntaxErrorManager.syntaxFatalError("003. Palabra PROCEDURE no definida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= procedure error PARENTESISIZQ PARENTESISDER IS cabecera cuerpo 
            {
              Axiom RESULT =null;
		syntaxErrorManager.syntaxFatalError("001. No se ha especificado nombre del progama");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= procedure PARENTESISIZQ PARENTESISDER IS cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= procedure PARENTESISIZQ PARENTESISDER IS cabecera cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden anadir mas acciones semanticas
  		// Comentar estas lineas para el 1er cuatrimestre
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

