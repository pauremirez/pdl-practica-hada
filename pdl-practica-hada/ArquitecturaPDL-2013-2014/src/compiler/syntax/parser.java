
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 02 15:44:45 CET 2014
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 02 15:44:45 CET 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\046\002\000\002\003" +
    "\004\000\002\002\010\000\002\002\007\000\002\002\011" +
    "\000\002\002\011\000\002\045\004\000\002\045\004\000" +
    "\002\036\006\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\004\000\002\036\004\000\002\036" +
    "\003\000\002\036\005\000\002\036\004\000\002\036\004" +
    "\000\002\036\003\000\002\036\004\000\002\036\003\000" +
    "\002\036\003\000\002\007\003\000\002\007\004\000\002" +
    "\004\003\000\002\004\004\000\002\005\003\000\002\005" +
    "\004\000\002\006\003\000\002\006\004\000\002\010\010" +
    "\000\002\010\010\000\002\011\016\000\002\011\016\000" +
    "\002\011\016\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\013\003\000\002\013\003\000\002\047" +
    "\002\000\002\014\015\000\002\050\002\000\002\014\014" +
    "\000\002\051\002\000\002\014\014\000\002\052\002\000" +
    "\002\014\013\000\002\014\011\000\002\035\012\000\002" +
    "\035\011\000\002\015\011\000\002\015\010\000\002\022" +
    "\003\000\002\022\004\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\025\007\000\002\025\007\000\002\026\011\000\002" +
    "\027\011\000\002\027\013\000\002\030\006\000\002\030" +
    "\010\000\002\030\012\000\002\030\011\000\002\040\006" +
    "\000\002\041\003\000\002\041\005\000\002\024\011\000" +
    "\002\024\007\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\003\000\002\032\003\000\002\032\005\000" +
    "\002\032\007\000\002\032\003\000\002\032\003\000\002" +
    "\032\006\000\002\033\003\000\002\033\003\000\002\034" +
    "\002\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\021\004\000\002\021\005\000\002\016\003\000" +
    "\002\016\005\000\002\043\005\000\002\044\003\000\002" +
    "\044\003\000\002\037\007\000\002\053\002\000\002\037" +
    "\007\000\002\017\005\000\002\017\003\000\002\020\006" +
    "\000\002\020\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\006\024\000\053\000\001\002\000\004\002" +
    "\u010d\001\002\000\006\024\010\053\006\001\002\000\004" +
    "\003\u0107\001\002\000\004\002\uffff\001\002\000\006\003" +
    "\u0106\053\u0105\001\002\000\006\003\012\034\013\001\002" +
    "\000\004\034\u0100\001\002\000\004\035\014\001\002\000" +
    "\004\017\015\001\002\000\014\006\031\014\025\024\010" +
    "\031\033\053\030\001\002\000\010\006\uffda\014\uffda\024" +
    "\uffda\001\002\000\014\006\uffea\014\uffea\024\uffea\031\uffea" +
    "\053\uffea\001\002\000\004\002\ufffd\001\002\000\012\006" +
    "\uffec\014\025\024\010\053\055\001\002\000\014\006\uffe8" +
    "\014\uffe8\024\uffe8\031\uffe8\053\uffe8\001\002\000\014\006" +
    "\uffee\014\025\024\010\031\033\053\055\001\002\000\004" +
    "\034\357\001\002\000\004\053\271\001\002\000\004\006" +
    "\031\001\002\000\012\006\uffe6\014\uffe6\024\uffe6\053\uffe6" +
    "\001\002\000\006\040\056\042\261\001\002\000\014\012" +
    "\uff98\015\113\025\107\032\105\053\115\001\002\000\010" +
    "\006\uffeb\014\025\024\010\001\002\000\004\053\065\001" +
    "\002\000\014\006\ufff2\014\025\024\010\031\033\053\030" +
    "\001\002\000\010\007\042\016\040\053\041\001\002\000" +
    "\010\006\uffd9\014\uffd9\024\uffd9\001\002\000\010\006\uffe4" +
    "\014\uffe4\024\uffe4\001\002\000\004\041\045\001\002\000" +
    "\004\041\044\001\002\000\004\041\043\001\002\000\012" +
    "\006\uffdc\014\uffdc\024\uffdc\053\uffdc\001\002\000\012\006" +
    "\uffdb\014\uffdb\024\uffdb\053\uffdb\001\002\000\012\006\uffdd" +
    "\014\uffdd\024\uffdd\053\uffdd\001\002\000\014\006\uffe9\014" +
    "\uffe9\024\uffe9\031\uffe9\053\uffe9\001\002\000\012\006\ufff3" +
    "\014\025\024\010\053\055\001\002\000\010\006\ufff4\014" +
    "\025\024\010\001\002\000\012\014\025\024\010\031\033" +
    "\053\055\001\002\000\014\006\uffe7\014\uffe7\024\uffe7\031" +
    "\uffe7\053\uffe7\001\002\000\012\006\ufff5\014\025\024\010" +
    "\053\055\001\002\000\010\006\ufff6\014\025\024\010\001" +
    "\002\000\006\040\056\042\057\001\002\000\004\053\055" +
    "\001\002\000\012\007\uffa0\016\uffa0\023\uffa0\053\uffa0\001" +
    "\002\000\012\007\uff9f\016\uff9f\023\uff9f\053\uff9f\001\002" +
    "\000\010\006\uffe3\014\uffe3\024\uffe3\001\002\000\012\006" +
    "\uffe5\014\uffe5\024\uffe5\053\uffe5\001\002\000\010\006\ufff8" +
    "\014\025\024\010\001\002\000\010\006\ufff7\014\025\024" +
    "\010\001\002\000\004\017\066\001\002\000\004\005\067" +
    "\001\002\000\004\034\070\001\002\000\004\054\071\001" +
    "\002\000\004\055\072\001\002\000\004\054\073\001\002" +
    "\000\004\035\074\001\002\000\004\021\075\001\002\000" +
    "\010\007\100\016\077\053\076\001\002\000\004\041\103" +
    "\001\002\000\004\041\102\001\002\000\004\041\101\001" +
    "\002\000\014\006\uffdf\014\uffdf\024\uffdf\031\uffdf\053\uffdf" +
    "\001\002\000\014\006\uffe0\014\uffe0\024\uffe0\031\uffe0\053" +
    "\uffe0\001\002\000\014\006\uffde\014\uffde\024\uffde\031\uffde" +
    "\053\uffde\001\002\000\004\012\256\001\002\000\014\013" +
    "\131\030\126\034\127\053\132\054\157\001\002\000\020" +
    "\011\uffc9\012\uffc9\015\uffc9\025\uffc9\026\uffc9\032\uffc9\053" +
    "\uffc9\001\002\000\004\034\241\001\002\000\014\012\236" +
    "\015\113\025\107\032\105\053\115\001\002\000\020\011" +
    "\uffcb\012\uffcb\015\uffcb\025\uffcb\026\uffcb\032\uffcb\053\uffcb" +
    "\001\002\000\020\011\uffc6\012\uffc6\015\uffc6\025\uffc6\026" +
    "\uffc6\032\uffc6\053\uffc6\001\002\000\014\013\131\030\126" +
    "\034\127\053\132\054\157\001\002\000\004\051\214\001" +
    "\002\000\010\034\123\051\122\052\121\001\002\000\020" +
    "\011\uffc7\012\uffc7\015\uffc7\025\uffc7\026\uffc7\032\uffc7\053" +
    "\uffc7\001\002\000\020\011\uffc5\012\uffc5\015\uffc5\025\uffc5" +
    "\026\uffc5\032\uffc5\053\uffc5\001\002\000\020\011\uffc8\012" +
    "\uffc8\015\uffc8\025\uffc8\026\uffc8\032\uffc8\053\uffc8\001\002" +
    "\000\004\053\203\001\002\000\014\013\131\030\126\034" +
    "\127\053\132\054\157\001\002\000\014\013\131\030\126" +
    "\034\127\053\132\054\125\001\002\000\004\035\177\001" +
    "\002\000\026\004\uffac\022\uffac\035\173\040\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\001\002\000" +
    "\034\004\uffa6\020\uffa6\022\uffa6\027\uffa6\035\uffa6\040\uffa6" +
    "\041\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\001\002\000\014\013\131\030\126\034\127\053\132" +
    "\054\157\001\002\000\026\004\154\022\155\035\uffba\040" +
    "\147\043\150\044\151\045\152\046\156\047\153\050\146" +
    "\001\002\000\034\004\uffa5\020\uffa5\022\uffa5\027\uffa5\035" +
    "\uffa5\040\uffa5\041\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\001\002\000\040\004\uffad\020\uffad\022" +
    "\uffad\027\uffad\034\136\035\uffad\040\uffad\041\uffad\043\uffad" +
    "\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\052\135\001" +
    "\002\000\034\004\uffa9\020\uffa9\022\uffa9\027\uffa9\035\uffa9" +
    "\040\uffa9\041\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\001\002\000\034\004\uffa8\020\uffa8\022\uffa8" +
    "\027\uffa8\035\uffa8\040\uffa8\041\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\050\uffa8\001\002\000\004\053\143" +
    "\001\002\000\014\013\131\030\126\034\127\053\132\054" +
    "\140\001\002\000\004\035\142\001\002\000\026\004\uffac" +
    "\022\uffac\035\141\040\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\047\uffac\050\uffac\001\002\000\034\004\uffa7\020\uffa7" +
    "\022\uffa7\027\uffa7\035\uffa7\040\uffa7\041\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\001\002\000\034" +
    "\004\uffbb\020\uffbb\022\uffbb\027\uffbb\035\uffbb\040\uffbb\041" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\001\002\000\036\004\uffab\020\uffab\022\uffab\027\uffab\035" +
    "\uffab\040\uffab\041\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\052\144\001\002\000\004\053\145\001" +
    "\002\000\034\004\uffaa\020\uffaa\022\uffaa\027\uffaa\035\uffaa" +
    "\040\uffaa\041\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\001\002\000\014\013\131\030\126\034\127" +
    "\053\132\054\157\001\002\000\014\013\131\030\126\034" +
    "\127\053\132\054\157\001\002\000\014\013\131\030\126" +
    "\034\127\053\132\054\157\001\002\000\014\013\131\030" +
    "\126\034\127\053\132\054\157\001\002\000\014\013\131" +
    "\030\126\034\127\053\132\054\157\001\002\000\014\013" +
    "\131\030\126\034\127\053\132\054\157\001\002\000\014" +
    "\013\131\030\126\034\127\053\132\054\157\001\002\000" +
    "\014\013\131\030\126\034\127\053\132\054\157\001\002" +
    "\000\014\013\131\030\126\034\127\053\132\054\157\001" +
    "\002\000\034\004\uffac\020\uffac\022\uffac\027\uffac\035\uffac" +
    "\040\uffac\041\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\001\002\000\034\004\uffb0\020\uffb0\022\155" +
    "\027\uffb0\035\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\050\146\001\002\000\034\004\uffb4" +
    "\020\uffb4\022\uffb4\027\uffb4\035\uffb4\040\uffb4\041\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\001\002" +
    "\000\034\004\uffb5\020\uffb5\022\155\027\uffb5\035\uffb5\040" +
    "\uffb5\041\uffb5\043\uffb5\044\151\045\152\046\156\047\153" +
    "\050\146\001\002\000\034\004\uffaf\020\uffaf\022\155\027" +
    "\uffaf\035\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\146\001\002\000\034\004\uffb2\020" +
    "\uffb2\022\155\027\uffb2\035\uffb2\040\uffb2\041\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\146\001\002\000" +
    "\034\004\uffb1\020\uffb1\022\155\027\uffb1\035\uffb1\040\uffb1" +
    "\041\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\146\001\002\000\034\004\uffb6\020\uffb6\022\155\027\uffb6" +
    "\035\uffb6\040\uffb6\041\uffb6\043\uffb6\044\151\045\152\046" +
    "\156\047\153\050\146\001\002\000\004\035\uffb9\001\002" +
    "\000\034\004\uffb3\020\uffb3\022\uffb3\027\uffb3\035\uffb3\040" +
    "\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\001\002\000\024\004\154\022\155\035\172\043" +
    "\150\044\151\045\152\046\156\047\153\050\146\001\002" +
    "\000\034\004\uffae\020\uffae\022\uffae\027\uffae\035\uffae\040" +
    "\uffae\041\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\001\002\000\004\051\174\001\002\000\014\013" +
    "\131\030\126\034\127\053\132\054\157\001\002\000\024" +
    "\004\154\022\155\041\176\043\150\044\151\045\152\046" +
    "\156\047\153\050\146\001\002\000\020\011\uffbc\012\uffbc" +
    "\015\uffbc\025\uffbc\026\uffbc\032\uffbc\053\uffbc\001\002\000" +
    "\004\041\200\001\002\000\020\011\uffb7\012\uffb7\015\uffb7" +
    "\025\uffb7\026\uffb7\032\uffb7\053\uffb7\001\002\000\024\004" +
    "\154\022\155\041\202\043\150\044\151\045\152\046\156" +
    "\047\153\050\146\001\002\000\020\011\uffbf\012\uffbf\015" +
    "\uffbf\025\uffbf\026\uffbf\032\uffbf\053\uffbf\001\002\000\006" +
    "\051\205\052\204\001\002\000\004\053\210\001\002\000" +
    "\014\013\131\030\126\034\127\053\132\054\157\001\002" +
    "\000\024\004\154\022\155\041\207\043\150\044\151\045" +
    "\152\046\156\047\153\050\146\001\002\000\020\011\uffbe" +
    "\012\uffbe\015\uffbe\025\uffbe\026\uffbe\032\uffbe\053\uffbe\001" +
    "\002\000\004\051\211\001\002\000\014\013\131\030\126" +
    "\034\127\053\132\054\157\001\002\000\024\004\154\022" +
    "\155\041\213\043\150\044\151\045\152\046\156\047\153" +
    "\050\146\001\002\000\020\011\uffbd\012\uffbd\015\uffbd\025" +
    "\uffbd\026\uffbd\032\uffbd\053\uffbd\001\002\000\004\053\215" +
    "\001\002\000\004\034\216\001\002\000\014\013\131\030" +
    "\126\034\127\053\132\054\157\001\002\000\004\035\220" +
    "\001\002\000\004\041\221\001\002\000\020\011\uffb8\012" +
    "\uffb8\015\uffb8\025\uffb8\026\uffb8\032\uffb8\053\uffb8\001\002" +
    "\000\024\004\154\022\155\027\223\043\150\044\151\045" +
    "\152\046\156\047\153\050\146\001\002\000\012\015\113" +
    "\025\107\032\105\053\115\001\002\000\016\011\226\012" +
    "\227\015\113\025\107\032\105\053\115\001\002\000\020" +
    "\011\uffca\012\uffca\015\uffca\025\uffca\026\uffca\032\uffca\053" +
    "\uffca\001\002\000\012\015\113\025\107\032\105\053\115" +
    "\001\002\000\004\015\230\001\002\000\004\041\231\001" +
    "\002\000\020\011\uffc1\012\uffc1\015\uffc1\025\uffc1\026\uffc1" +
    "\032\uffc1\053\uffc1\001\002\000\014\012\233\015\113\025" +
    "\107\032\105\053\115\001\002\000\004\015\234\001\002" +
    "\000\004\041\235\001\002\000\020\011\uffc0\012\uffc0\015" +
    "\uffc0\025\uffc0\026\uffc0\032\uffc0\053\uffc0\001\002\000\004" +
    "\053\237\001\002\000\004\041\240\001\002\000\012\002" +
    "\uff99\006\uff99\014\uff99\024\uff99\001\002\000\016\013\131" +
    "\030\126\034\127\053\132\054\157\056\243\001\002\000" +
    "\024\004\154\022\155\035\246\043\150\044\151\045\152" +
    "\046\156\047\153\050\146\001\002\000\004\035\244\001" +
    "\002\000\004\041\245\001\002\000\020\011\uffc4\012\uffc4" +
    "\015\uffc4\025\uffc4\026\uffc4\032\uffc4\053\uffc4\001\002\000" +
    "\004\041\247\001\002\000\020\011\uffc3\012\uffc3\015\uffc3" +
    "\025\uffc3\026\uffc3\032\uffc3\053\uffc3\001\002\000\024\004" +
    "\154\020\251\022\155\043\150\044\151\045\152\046\156" +
    "\047\153\050\146\001\002\000\012\015\113\025\107\032" +
    "\105\053\115\001\002\000\014\012\253\015\113\025\107" +
    "\032\105\053\115\001\002\000\004\020\254\001\002\000" +
    "\004\041\255\001\002\000\020\011\uffc2\012\uffc2\015\uffc2" +
    "\025\uffc2\026\uffc2\032\uffc2\053\uffc2\001\002\000\004\053" +
    "\257\001\002\000\004\041\260\001\002\000\012\002\uff97" +
    "\006\uff97\014\uff97\024\uff97\001\002\000\012\007\uffa0\010" +
    "\262\016\uffa0\053\uffa0\001\002\000\004\051\263\001\002" +
    "\000\010\013\131\030\126\054\265\001\002\000\004\041" +
    "\267\001\002\000\004\041\266\001\002\000\014\006\uffe2" +
    "\014\uffe2\024\uffe2\031\uffe2\053\uffe2\001\002\000\014\006" +
    "\uffe1\014\uffe1\024\uffe1\031\uffe1\053\uffe1\001\002\000\004" +
    "\002\ufffe\001\002\000\006\003\272\034\273\001\002\000" +
    "\004\026\353\001\002\000\006\035\275\053\274\001\002" +
    "\000\006\040\351\042\uff95\001\002\000\004\026\341\001" +
    "\002\000\004\035\312\001\002\000\004\042\300\001\002" +
    "\000\012\007\uffa4\016\uffa4\023\301\053\uffa4\001\002\000" +
    "\010\007\uff9b\016\uff9b\053\uff9b\001\002\000\010\007\uff9a" +
    "\016\uff9a\053\uff9a\001\002\000\010\007\307\016\304\053" +
    "\305\001\002\000\010\017\uffa3\035\uffa3\041\uffa3\001\002" +
    "\000\010\017\uffa1\035\uffa1\041\uffa1\001\002\000\006\035" +
    "\uff94\041\310\001\002\000\010\017\uffa2\035\uffa2\041\uffa2" +
    "\001\002\000\004\053\274\001\002\000\004\035\uff93\001" +
    "\002\000\004\026\313\001\002\000\010\007\307\016\304" +
    "\053\305\001\002\000\004\017\315\001\002\000\014\006" +
    "\uffd4\014\uffd8\024\uffd8\031\uffd8\053\uffd8\001\002\000\004" +
    "\006\322\001\002\000\012\014\025\024\010\031\033\053" +
    "\030\001\002\000\004\006\322\001\002\000\010\006\uffd7" +
    "\014\uffd7\024\uffd7\001\002\000\014\015\113\025\107\026" +
    "\324\032\105\053\115\001\002\000\014\015\113\025\107" +
    "\026\332\032\105\053\115\001\002\000\014\013\131\030" +
    "\126\034\127\053\132\054\157\001\002\000\024\004\154" +
    "\022\155\041\326\043\150\044\151\045\152\046\156\047" +
    "\153\050\146\001\002\000\004\012\327\001\002\000\004" +
    "\053\330\001\002\000\004\041\331\001\002\000\010\006" +
    "\uffce\014\uffce\024\uffce\001\002\000\014\013\131\030\126" +
    "\034\127\053\132\054\157\001\002\000\024\004\154\022" +
    "\155\041\334\043\150\044\151\045\152\046\156\047\153" +
    "\050\146\001\002\000\004\012\335\001\002\000\004\053" +
    "\336\001\002\000\004\041\337\001\002\000\010\006\uffcf" +
    "\014\uffcf\024\uffcf\001\002\000\010\006\uffd3\014\uffd3\024" +
    "\uffd3\001\002\000\010\007\307\016\304\053\305\001\002" +
    "\000\004\017\343\001\002\000\014\006\uffd2\014\uffd6\024" +
    "\uffd6\031\uffd6\053\uffd6\001\002\000\012\014\025\024\010" +
    "\031\033\053\030\001\002\000\004\006\322\001\002\000" +
    "\010\006\uffd1\014\uffd1\024\uffd1\001\002\000\004\006\322" +
    "\001\002\000\010\006\uffd5\014\uffd5\024\uffd5\001\002\000" +
    "\004\053\274\001\002\000\004\042\uff96\001\002\000\010" +
    "\007\307\016\304\053\305\001\002\000\004\017\355\001" +
    "\002\000\004\006\322\001\002\000\010\006\uffd0\014\uffd0" +
    "\024\uffd0\001\002\000\004\053\055\001\002\000\004\035" +
    "\367\001\002\000\012\007\uffa4\016\uffa4\023\301\053\uffa4" +
    "\001\002\000\006\035\uff9e\041\363\001\002\000\004\053" +
    "\055\001\002\000\004\035\uff9d\001\002\000\010\007\307" +
    "\016\304\053\305\001\002\000\006\035\uff9c\041\uff9c\001" +
    "\002\000\004\017\370\001\002\000\014\006\031\014\025" +
    "\024\010\031\033\053\030\001\002\000\010\006\uffcc\014" +
    "\uffcc\024\uffcc\001\002\000\004\006\031\001\002\000\010" +
    "\006\uffcd\014\uffcd\024\uffcd\001\002\000\012\006\ufff0\014" +
    "\025\024\010\053\055\001\002\000\010\006\uffef\014\025" +
    "\024\010\001\002\000\010\006\ufff1\014\025\024\010\001" +
    "\002\000\010\006\uffed\014\025\024\010\001\002\000\004" +
    "\035\u0101\001\002\000\004\017\u0102\001\002\000\012\014" +
    "\025\024\010\031\033\053\030\001\002\000\004\006\031" +
    "\001\002\000\004\002\ufffc\001\002\000\006\003\ufffa\034" +
    "\ufffa\001\002\000\006\003\ufff9\034\ufff9\001\002\000\004" +
    "\034\u0108\001\002\000\004\035\u0109\001\002\000\004\017" +
    "\u010a\001\002\000\012\014\025\024\010\031\033\053\030" +
    "\001\002\000\004\006\031\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\006\003\003\046\004\001\001\000\002\001" +
    "\001\000\006\002\006\045\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\022\005\020\006\031\007\033\010\016\011\021\012" +
    "\026\013\036\014\035\015\015\021\034\036\025\037\017" +
    "\045\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\376\012\061\013\036\014\035" +
    "\015\015\021\034\045\023\001\001\000\002\001\001\000" +
    "\024\005\373\006\374\011\051\012\026\013\036\014\035" +
    "\015\015\021\034\045\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\022\107\023\110\024\116\025" +
    "\111\026\115\027\117\030\105\031\113\053\103\001\001" +
    "\000\012\013\060\014\035\015\015\045\023\001\001\000" +
    "\002\001\001\000\030\004\050\005\046\006\047\010\045" +
    "\011\021\012\026\013\036\014\035\015\015\021\034\045" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\063\012\061\013\036\014" +
    "\035\015\015\021\034\045\023\001\001\000\012\013\060" +
    "\014\035\015\015\045\023\001\001\000\024\005\052\006" +
    "\053\011\051\012\026\013\036\014\035\015\015\021\034" +
    "\045\023\001\001\000\002\001\001\000\020\006\062\012" +
    "\061\013\036\014\035\015\015\021\034\045\023\001\001" +
    "\000\012\013\060\014\035\015\015\045\023\001\001\000" +
    "\002\001\001\000\004\021\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\060\014\035\015\015\045\023\001\001\000\012" +
    "\013\060\014\035\015\015\045\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\247" +
    "\033\133\040\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\023\224\024\116\025\111\026\115\027\117" +
    "\030\105\031\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\221\033\133\040\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\200" +
    "\033\133\040\132\001\001\000\012\032\127\033\133\040" +
    "\132\041\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\170\033\133\040\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\032\127\033\133\040\132\041\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\167\033\133\040\132\001\001\000\012\032" +
    "\127\033\133\040\132\041\166\001\001\000\010\032\165" +
    "\033\133\040\132\001\001\000\010\032\164\033\133\040" +
    "\132\001\001\000\010\032\163\033\133\040\132\001\001" +
    "\000\010\032\162\033\133\040\132\001\001\000\010\032" +
    "\161\033\133\040\132\001\001\000\010\032\160\033\133" +
    "\040\132\001\001\000\010\032\157\033\133\040\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\174\033\133\040\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\205\033\133\040\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\211\033\133\040\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\032\127\033\133\040\132\041\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\022\223\023\110\024\116\025\111\026" +
    "\115\027\117\030\105\031\113\001\001\000\020\023\224" +
    "\024\116\025\111\026\115\027\117\030\105\031\113\001" +
    "\001\000\002\001\001\000\022\022\231\023\110\024\116" +
    "\025\111\026\115\027\117\030\105\031\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\023\224\024\116\025\111\026\115\027\117\030\105\031" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\241\033\133\040\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\022\251\023\110\024\116\025\111\026\115\027" +
    "\117\030\105\031\113\001\001\000\020\023\224\024\116" +
    "\025\111\026\115\027\117\030\105\031\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\276\020\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\301\044\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\276\020\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\313\001\001\000\002\001\001\000\006\047" +
    "\316\051\315\001\001\000\004\035\337\001\001\000\034" +
    "\004\022\005\020\006\031\007\033\010\016\011\021\012" +
    "\026\013\036\014\035\015\015\021\034\036\317\045\023" +
    "\001\001\000\004\035\320\001\001\000\002\001\001\000" +
    "\022\022\322\023\110\024\116\025\111\026\115\027\117" +
    "\030\105\031\113\001\001\000\020\023\224\024\116\025" +
    "\111\026\115\027\117\030\105\031\113\001\001\000\010" +
    "\032\324\033\133\040\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\332\033\133\040\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\341\001\001\000\002\001\001\000\006\050\343\052\344" +
    "\001\001\000\034\004\022\005\020\006\031\007\033\010" +
    "\016\011\021\012\026\013\036\014\035\015\015\021\034" +
    "\036\346\045\023\001\001\000\004\035\345\001\001\000" +
    "\002\001\001\000\004\035\347\001\001\000\002\001\001" +
    "\000\004\017\351\001\001\000\002\001\001\000\004\042" +
    "\353\001\001\000\002\001\001\000\004\035\355\001\001" +
    "\000\002\001\001\000\010\016\357\021\360\043\361\001" +
    "\001\000\002\001\001\000\006\034\301\044\364\001\001" +
    "\000\002\001\001\000\010\016\363\021\360\043\361\001" +
    "\001\000\002\001\001\000\004\042\365\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\022\005\020\006" +
    "\031\007\033\010\016\011\021\012\026\013\036\014\035" +
    "\015\015\021\034\036\371\037\370\045\023\001\001\000" +
    "\002\001\001\000\004\037\372\001\001\000\002\001\001" +
    "\000\020\006\375\012\061\013\036\014\035\015\015\021" +
    "\034\045\023\001\001\000\012\013\060\014\035\015\015" +
    "\045\023\001\001\000\012\013\060\014\035\015\015\045" +
    "\023\001\001\000\012\013\060\014\035\015\015\045\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\022\005\020\006\031\007\033\010\016\011\021\012\026" +
    "\013\036\014\035\015\015\021\034\036\u0102\045\023\001" +
    "\001\000\004\037\u0103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\022\005\020\006\031" +
    "\007\033\010\016\011\021\012\026\013\036\014\035\015" +
    "\015\021\034\036\u010a\045\023\001\001\000\004\037\u010b" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
		Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	//FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

	// Cadenas 
	List cadenas = new ArrayList();
	// Desplazamiento con RA principal
	int despl=5;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lista_parametros ::= lista_argumentos DOSPUNTOS modo tipos PUNTOYCOMA lista_parametros 
            {
              ListaObjetos RESULT =null;
		int listaArg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaArg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListaObjetos listaArg1 = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaArg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaArg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaObjetos listaArg2 = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        			ListaObjetos lista1 = new ListaObjetos(listaArg1);
                        	for (int i=0;i<lista1.size();i++){
				    Parametro p = (Parametro) lista1.get(i);
				    p.setTipo(scopeManager.searchType(tp.toString()));
				}

				ListaObjetos lista2 = new ListaObjetos(listaArg2);
				for (int i=0;i<lista2.size();i++){
						lista1.add(lista2.get(i));
    				}
				RESULT=lista1;	
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // lista_parametros ::= lista_argumentos DOSPUNTOS modo tipos 
            {
              ListaObjetos RESULT =null;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            ListaObjetos lista = new ListaObjetos(listaArg);
                            for (int i=0;i<lista.size();i++){
                                Parametro p = (Parametro) lista.get(i);
                                p.setTipo(scopeManager.searchType(tp.toString()));
                            }
                            RESULT=listaArg;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lista_argumentos ::= ID 
            {
              ListaObjetos RESULT =null;
		int idParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idParright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token idPar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				// Añadir ID a lista objetos Variables
				ListaObjetos lista = new ListaObjetos();
				Parametro par = new Parametro(idPar.getLexema(), 0, idPar.getLine(), idPar.getColumn(),null);
				lista.add(par);
	                        RESULT = lista;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lista_argumentos ::= ID COMA lista_argumentos 
            {
              ListaObjetos RESULT =null;
		int idParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token idPar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               // Añadir IDs a lista objetos Parametro
                                ListaObjetos lista = new ListaObjetos(listaArg);
                                Parametro par = new Parametro(idPar.getLexema(), 0, idPar.getLine(), idPar.getColumn(),null);
				lista.add(par);
	                        RESULT = lista;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo ::= BEGIN NT$5 END ID PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$5 ::= 
            {
              BloqueSentencias RESULT =null;

	BloqueSentencias bloque = new BloqueSentencias();
	RESULT=bloque;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpo ::= BEGIN listaSentencias END ID PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    RESULT=bloque;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // modo ::= vacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // modo ::= OUT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametro ::= idParametros modo tipos 
            {
              ListaObjetos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaObjetos id = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	syntaxErrorManager.syntaxInfo ("Parametros ID: " + id);
	syntaxErrorManager.syntaxInfo ("Parametros TIPO: " + t);
	
	//SymbolParameter parametro=new SymbolParameter (scopeManager.getCurrentScope(),id.getLexema(),scopeManager.searchType(t.toString()));
	
	ListaObjetos lista = new ListaObjetos(id);
 /*   for (int i=0;i<lista.size();i++){
    	syntaxErrorManager.syntaxInfo ("lista.get(i)"+lista.get(i));
    	Parametro p = (Parametro) lista.get(i);
       	p.setReferencia(true);
		p.setTipo(scopeManager.searchType(t.toString()));
   	}*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros ::= parametro PUNTOYCOMA parametros 
            {
              ListaObjetos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros ::= parametro 
            {
              ListaObjetos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // idParametros ::= ID COMA idParametros 
            {
              ListaObjetos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaObjetos listParam = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   	// Añadir IDs a lista objetos Variables
   	ListaObjetos list = new ListaObjetos(listParam);
   	Var var = new Var (id.getLexema(), 0, id.getLine(), id.getColumn());
   	list.add(var);
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idParametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // idParametros ::= ID DOSPUNTOS 
            {
              ListaObjetos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
   // Añadir IDs a lista objetos Variables
	ListaObjetos list = new ListaObjetos();
    Var var = new Var (id.getLexema(), null, id.getLine(), id.getColumn());
    list.add(var);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idParametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipos ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="BOOLEAN"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // vacio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vacio",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipoBooleano ::= FALSE 
            {
              Token RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoBooleano",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipoBooleano ::= TRUE 
            {
              Token RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoBooleano",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= ID PARENTESISIZQ ENTERO PARENTESISDER 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					ScopeIF scope = scopeManager.getCurrentScope();
			        SymbolTableIF tablaSimbolos = scope.getSymbolTable();
                  		TypeTableIF tablaTipos = scope.getTypeTable();
			        if (!(scopeManager.containsSymbol(id.getLexema()))) {
                                    semanticErrorManager.semanticFatalError ("242. La variable: " + id.getLexema() +" en [" + 
									id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                    } else {
                                    SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                                    Expresion exp = new Expresion(simbolo.getType(), id.getLine(), id.getColumn());
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    // Existe la var y es del tipo vector
                            if (! (simbolo.getType() instanceof TypeArray)) 
                                semanticErrorManager.semanticFatalError ("312. El ID: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es un tipo CONJUNTO.");
                            
                            semanticErrorManager.semanticInfo ("VECTOR--> "+id.getLexema()+" de tipo : "+ simbolo.getType().getName());
                            
                            // Asignacion entre limites
                            TypeArray tipoArray = (TypeArray) simbolo.getType();
                            int n = Integer.parseInt(num.getLexema());
                            if (n < tipoArray.getValIni() || n > tipoArray.getValFin())
                                semanticErrorManager.semanticFatalError ("314. El rango del vector: " + id.getLexema() +" en [" + 
						id.getLine() + ":" + id.getColumn() + "] no esta dentro de los limites del mismo.");

                          	semanticErrorManager.semanticInfo ("El valor '"+ num.getLexema() + "' esta dentro de los limites ["+tipoArray.getValIni()+","+tipoArray.getValFin()+"]");
                           	
                           	// Comprobacion de tipos (vector y expresion)
						if ( !(simbolo.getType().getName().equalsIgnoreCase(exp.getTipo().getName())) ) {	
							TypeIF tipoVar=scopeManager.searchType(simbolo.getType().getName());
                        	if ( !(simbolo.getType().getName().equalsIgnoreCase(tipoVar.getName())))  
                                        semanticErrorManager.semanticFatalError ("308. El ID: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no son compatibles.");
                       }					
                            

			
                                RESULT=exp;	
                              }								
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= tipoBooleano 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ScopeIF scope = scopeManager.getCurrentScope();
	      	            Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
                            // Le damos el valor true=1 y false=0
                            Value resultado=new Value(0);
                            if (id.getLexema().equals("TRUE")){
				resultado=new Value(1);
                            }
				exp.setResultado(resultado);
                                RESULT=exp;			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= sentenciaFuncion 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=exp;									
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= ID PUNTO ID PUNTO ID 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= ID PUNTO ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token campo = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			    if ( !(scopeManager.containsSymbol(id.getLexema())) ) {
                                  semanticErrorManager.semanticFatalError ("244. El tipo registro: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                            }
                            ScopeIF scope = scopeManager.getCurrentScope();
                            SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                            TypeRecord tipoRecord = (TypeRecord) scopeManager.searchType(simbolo.getType().getName());

                            // El campo existe en el Registro
                            if (! tipoRecord.containsCampo(campo.getLexema() )) {
                                    semanticErrorManager.semanticFatalError ("246. El campo registro: " + campo.getLexema() +" en [" + 
							campo.getLine() + ":" + campo.getColumn() + "] no ha sido definida.");
                            }                            
                            Expresion exp = new Expresion(tipoRecord.getTypeCampo(campo.getLexema()), campo.getLine(), campo.getColumn());
                            HashMap tablaCampos = tipoRecord.getTablaCampos();
                            SymbolVariable simboloCampo = (SymbolVariable) tablaCampos.get(campo.getLexema()); 


                            exp.setReferencia(true);


                            RESULT = exp;
                		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ScopeIF scope = scopeManager.getCurrentScope();
	      	            Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), num.getLine(), num.getColumn());
			    Value resultado=new Value(Integer.parseInt(num.getLexema()));
                            exp.setResultado(resultado);  // Guardamos el valor operador
			    RESULT = exp;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ScopeIF scope = scopeManager.getCurrentScope();
			        SymbolTableIF tablaSimbolos = scope.getSymbolTable();
                  		TypeTableIF tablaTipos = scope.getTypeTable();
			        if (!(scopeManager.containsSymbol(id.getLexema()))) {
                                    semanticErrorManager.semanticFatalError ("242. La variable: " + id.getLexema() +" en [" + 
									id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                    		} else {
                                    SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                                    Expresion exp = new Expresion(simbolo.getType(), id.getLine(), id.getColumn());
                                    if (simbolo instanceof SymbolConstant) {
					SymbolConstant simboloCte = (SymbolConstant) simbolo;
					Value valor=new Value(simboloCte.getValue());
                                        exp.setResultado(valor);
				    }else{
                                     
				       
                                    }
                       		    RESULT = exp;
                    		}
                		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= PARENTESISIZQ expresion PARENTESISDER 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					RESULT=exp; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion DISTINTOQUE expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if ( !(exp1.getTipo() == exp2.getTipo()) )
                                  semanticErrorManager.semanticFatalError ("238. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            if ( (exp1.getTipo() instanceof TypeRecord) || exp1.getTipo() instanceof TypeSet )
                                  semanticErrorManager.semanticFatalError ("240. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no permitida para este tipo.");
                     
                            Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
                            ScopeIF scope = scopeManager.getCurrentScope();
                           
                            Value verdad = new Value(1);
                            Value falso = new Value(0);
                           
                            RESULT=exp;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion IGUALQUE expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if ( !(exp1.getTipo() == exp2.getTipo()) )
                                  semanticErrorManager.semanticFatalError ("234. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            if ( (exp1.getTipo() instanceof TypeRecord) || exp1.getTipo() instanceof TypeSet )
                                  semanticErrorManager.semanticFatalError ("236. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no permitida para este tipo.");
                            
                            Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
                            ScopeIF scope = scopeManager.getCurrentScope();
                           
                            
                            
                            Value verdad = new Value(1);
                            Value falso = new Value(0);
                            
                            RESULT=exp;
                  	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion MENORQUE expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			    if ( !(exp1.getTipo() == exp2.getTipo())  ||  !(exp1.getTipo().getName().equals("INTEGER"))  || !(exp2.getTipo().getName().equals("INTEGER")) )  {
                                  semanticErrorManager.semanticFatalError ("232. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
			     }else{
		      	          Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
				  ScopeIF scope = scopeManager.getCurrentScope();
				 
                                  Value verdad = new Value(1);
                                  Value falso = new Value(0);
        			 
						
				  RESULT=exp;
				}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion MAYORQUE expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			    if ( !(exp1.getTipo() == exp2.getTipo())  ||  !(exp1.getTipo().getName().equals("INTEGER"))  || !(exp2.getTipo().getName().equals("INTEGER")) )  {
                                  semanticErrorManager.semanticFatalError ("230. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
			     }else{
		      	          Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
				  ScopeIF scope = scopeManager.getCurrentScope();
				 

                                  Value verdad = new Value(1);
                                  Value falso = new Value(0);
        			  

						
				  RESULT=exp;
				}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if ( !(exp1.getTipo() == exp2.getTipo()) || !(exp1.getTipo().getName().equals("BOOLEAN")) || !(exp2.getTipo().getName().equals("BOOLEAN")) ) {
                                semanticErrorManager.semanticFatalError ("228. La expresion: " + id.getLexema() +" en [" + 
						id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            }else{
		      	        Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
				ScopeIF scope = scopeManager.getCurrentScope();
				

                                Value verdad = new Value(1);
                                Value falso = new Value(0);
        		
				RESULT=exp;
                            }
        		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if ( !(exp1.getTipo() == exp2.getTipo()) || !(exp1.getTipo().getName().equals("BOOLEAN")) || !(exp2.getTipo().getName().equals("BOOLEAN")) ) {
                                semanticErrorManager.semanticFatalError ("La expresion: " + id.getLexema() +" en [" + 
						id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            }else{
		      	        Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
				ScopeIF scope = scopeManager.getCurrentScope();
				
                                Value verdad = new Value(1);
                                Value falso = new Value(0);
        			
              
				RESULT=exp;
                            }
        		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ScopeIF scope = scopeManager.getCurrentScope();
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                            Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());
                          
						 // Suma CONJUNTOS
                            if (exp1.getTipo().equals(exp2.getTipo()) && exp1.getTipo() instanceof TypeSet) {
                                TypeSet tipoSet = (TypeSet) exp1.getTipo();
                                exp.setTipo(exp1.getTipo());
                                
                            // Suma ENTEROS y/o PUNTEROS  
                            } else {
                                if (exp.castingTipos(exp1 , exp2) )
                                     semanticErrorManager.semanticFatalError ("La expresion: " + id.getLexema() +" en [" + 
                                        id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                                  
                            }
                           
                            RESULT=exp;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());
                            if (exp.castingTipos(exp1 , exp2) ) {
                                 semanticErrorManager.semanticFatalError ("La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            }else{
                            	ScopeIF scope = scopeManager.getCurrentScope();

			
                                		
				RESULT=exp;
                             }

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciaProcedimiento ::= ID PARENTESISIZQ lista_parametros_llamada PARENTESISDER PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaProcedimiento",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaProcedimiento ::= idTipos ASIGNACION ID PARENTESISIZQ lista_parametros_llamada PARENTESISDER PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaProcedimiento",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lista_parametros_llamada ::= expresion COMA lista_parametros_llamada 
            {
              ListaObjetos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaParright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaObjetos listaPar = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ListaObjetos lista = new ListaObjetos(listaPar);
                            lista.add(exp);
                            RESULT=lista;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lista_parametros_llamada ::= expresion 
            {
              ListaObjetos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ListaObjetos lista = new ListaObjetos();
			    lista.add(exp);
                RESULT=lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaFuncion ::= ID PARENTESISIZQ lista_parametros_llamada PARENTESISDER 
            {
              Expresion RESULT =null;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listaParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaObjetos listaPar = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					semanticErrorManager.semanticInfo("Sentencia FUNCION en la linea: "+idFunc.getLine()+ "y columna "+idFunc.getColumn());
	                    
 					ScopeIF scope = scopeManager.getCurrentScope();
            		    SymbolTableIF tablaSimbolos = scope.getSymbolTable();
                            TypeTableIF tablaTipos = scope.getTypeTable();
			    
                            // Si la funcion ha sido declarada
		      	    if (!(scopeManager.containsSymbol(idFunc.getLexema()))) 
                                semanticErrorManager.semanticFatalError("340. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" NO ha sido declarada");
	                    
                            // Si es un tipo Funcion
                            SymbolIF func = scopeManager.searchSymbol(idFunc.getLexema());
                            if (! (func.getType() instanceof TypeFunction) )
				    semanticErrorManager.semanticFatalError("342. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" NO es un FUNCTION");
	            	        
            		    // num de parametros sea el mismo que argumentos y sea correcto por REF/Valor
	            	    TypeFunction tipoFunc = (TypeFunction) func.getType();
                            ListaObjetos lista = new ListaObjetos(listaPar);

                            // Coincidencia de Tipos y numero entre la Def de la funcion y la llamada
		  	    		if (!tipoFunc.comparaParametros(listaPar)) 
                                  semanticErrorManager.semanticFatalError ("344. El num. de parametros no coincide en tipos o numero para la funci�n " + idFunc.getLexema() + " [" + idFunc.getLine() + ":" + idFunc.getColumn() + "]");
            		    
                            Expresion exp = new Expresion(tipoFunc.getTipoRetorno(), idFunc.getLine(), idFunc.getColumn());
                             
                            
                            
                            // Obtener desplazamiento Funcion
                           
                            List lista1 = tipoFunc.getListaParametros();
                                     
                          
					
			    for (int i=listaPar.size()-1;i>=0; i--){
                                SymbolVariable s = (SymbolVariable) lista1.get(listaPar.size()-i-1);
                                Expresion expPar = (Expresion) listaPar.get(i);
                                if ( s.getReferencia() ) {
                                    if ( !expPar.getReferencia())
                                        semanticErrorManager.semanticFatalError ("346. El par�metro es por referencia y no admite expresiones." + idFunc.getLexema() + " [" + idFunc.getLine() + ":" + idFunc.getColumn() + "]");
                                  }else{
                                 }
                            }
                           
                            RESULT=exp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaAsignacion ::= ID PARENTESISIZQ ENTERO PARENTESISDER ASIGNACION expresion PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		semanticErrorManager.semanticInfo ("Sentencia ASIGNACION " + id.getLexema() + ":= " + exp.getTipo().getName()+" en [" +id.getLine() + ":" + id.getColumn()+"]");
			
                            ScopeIF scope = scopeManager.getCurrentScope();
                            BloqueSentencias bloque = new BloqueSentencias();
                            // Existe la variable vector
                            if (!(scopeManager.containsSymbol(id.getLexema())) ) 
                                semanticErrorManager.semanticFatalError ("310. El VECTOR: " + id.getLexema() +" en [" + 
						id.getLine() + ":" + id.getColumn() + "] no ha sido definido.");
                            
                            SymbolVariable simbolo = (SymbolVariable) scopeManager.searchSymbol(id.getLexema());
                            
                            // Existe la var y es del tipo vector
                            if (! (simbolo.getType() instanceof TypeArray)) 
                                semanticErrorManager.semanticFatalError ("312. El ID: " + id.getLexema() +" en [" + 
						id.getLine() + ":" + id.getColumn() + "] no es un tipo CONJUNTO.");
                            
                            semanticErrorManager.semanticInfo ("VECTOR--> "+id.getLexema()+" de tipo : "+ simbolo.getType().getName());
                            
                            // Asignacion entre limites
                            TypeArray tipoArray = (TypeArray) simbolo.getType();
                            int n = Integer.parseInt(num.getLexema());
                            if (n < tipoArray.getValIni() || n > tipoArray.getValFin())
                                semanticErrorManager.semanticFatalError ("314. El rango del vector: " + id.getLexema() +" en [" + 
						id.getLine() + ":" + id.getColumn() + "] no esta dentro de los limites del mismo.");

                          	semanticErrorManager.semanticInfo ("El valor '"+ num.getLexema() + "' esta dentro de los limites ["+tipoArray.getValIni()+","+tipoArray.getValFin()+"]");
                           	
                           	// Comprobacion de tipos (vector y expresion)
						if ( !(simbolo.getType().getName().equalsIgnoreCase(exp.getTipo().getName())) ) {	
							TypeIF tipoVar=scopeManager.searchType(simbolo.getType().getName());
                        	if ( !(simbolo.getType().getName().equalsIgnoreCase(tipoVar.getName())))  
                            //       }else {
                                        semanticErrorManager.semanticFatalError ("308. El ID: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no son compatibles.");
                            //        }					   
				      
                            //    }
                            }					
                            RESULT = bloque;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaAsignacion ::= ID PUNTO ID PUNTO ID ASIGNACION expresion PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaAsignacion ::= ID PUNTO ID ASIGNACION expresion PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token campo = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

					semanticErrorManager.semanticInfo ("Sentencia ASIGNACION " + id.getLexema() + ":= " + exp.getTipo().getName()+" en [" +id.getLine() + ":" + id.getColumn()+"]");
			
                            if ( !(scopeManager.containsSymbol(id.getLexema())) ) {
                                semanticErrorManager.semanticFatalError ("286. La variable: " + id.getLexema() +" en [" + 
								id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                            } else {
	                        SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                                TypeIF tipo = scopeManager.searchType(simbolo.getType().getName());

				if ( !(tipo instanceof TypeRecord) ) 
					semanticErrorManager.semanticFatalError ("290. La variable: " + id.getLexema() +" en [" + 
								id.getLine() + ":" + id.getColumn() + "] no es un tipo RECORD.");
				TypeRecord tipoRec = (TypeRecord) scopeManager.searchType(simbolo.getType().getName());
				if ( tipoRec.getTypeCampo(campo.getLexema()) == null ) 
                              		semanticErrorManager.semanticFatalError ("292. El campo del REG: " + campo.getLexema() +" en [" + 
							campo.getLine() + ":" + campo.getColumn() + "] no ha sido definido.");
                                
                                // Si no son mismo tipo. ID.campo debe ser expresion ENTERA
                                if ( !(tipoRec.getTypeCampo(campo.getLexema()).getName().equals(exp.getTipo().getName())) ){ 
                                    if ( (tipoRec.getTypeCampo(campo.getLexema()).getName().equals("INTEGER")&& exp.getTipo().getName().equals("POINTER")) ){
    			            }else{
                                         semanticErrorManager.semanticFatalError ("294. La Asignacion: " + id.getLexema() +" en [" + 
                                               	id.getLine() + ":" + id.getColumn() + "] no coincide en tipos.");
                                        }                
                                    }
					
                                    ScopeIF scope = scopeManager.getCurrentScope();
                                   
                                    BloqueSentencias bloque = new BloqueSentencias();
                                   				
                                    RESULT=bloque;
														
                    		}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaAsignacion ::= ID ASIGNACION expresion PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			semanticErrorManager.semanticInfo ("Sentencia ASIGNACION " + id.getLexema() + ":= " + exp.getTipo().getName()+" en [" +id.getLine() + ":" + id.getColumn()+"]");
							BloqueSentencias bloque = new BloqueSentencias();
                            ScopeIF scope = scopeManager.getCurrentScope();
                            
                            // Hay que tener en cuenta que puede ser el ID de una funcion
                            if (!(scopeManager.containsSymbol(id.getLexema()))) {
                                semanticErrorManager.semanticFatalError ("274. La variable: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                            } else {
				SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                                //TypeIF tipo = simbolo.getType();

				// Comprobamos que no es una constante
				if (simbolo instanceof SymbolConstant)
                                    semanticErrorManager.semanticFatalError ("276. La constante: " + id.getLexema() +" en [" + 
                                    id.getLine() + ":" + id.getColumn() + "] no admite asignaciones.");
                                    
                                  TypeIF tipo = exp.getTipo();
                                  
                                //semanticErrorManager.semanticInfo ("Sentencia asignacion. Tipo de la EXPRESION: "+tipo.getName()+ " en [" + id.getLine() + ":" + id.getColumn() + "]");
			            
                                // Comprobaciones en el caso de una funcion	
                                if (tipo instanceof TypeFunction ) {

                                    TypeFunction tipoFuncion = (TypeFunction) tipo;
                                    // El tipo de retorno debe ser igual que la expresion
                                     
                                    if ( !(tipoFuncion.getTipoRetorno() == exp.getTipo()) ) 
                                        semanticErrorManager.semanticFatalError ("278. El tipo retorno funcion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no coincide con la expresion.");
                                     // Es una funcion y si hay asignacion de retorno
                                     tipoFuncion.setHayRetorno(true);
                                     
                                    
                                } else {
                                    // SOY UNA ASIGNACION CONJUNTOS

                                    if (tipo instanceof TypeSet) {
 
                                        if ( !(tipo.getName() == exp.getTipo().getName()) ) 
                                            semanticErrorManager.semanticFatalError ("280. La expresion no se puede asignar a un Tipo CONJUNTO: " + id.getLexema() +" en [" + 
            					id.getLine() + ":" + id.getColumn() + "]");
                                        
                                         

                                    }else {
                                        // No se permiten asignaciones tipo record
                                        if (tipo instanceof TypeRecord)
                                            semanticErrorManager.semanticFatalError ("282. No se permiten asignaciones tipo record: " + id.getLexema() +" en [" + 
            					id.getLine() + ":" + id.getColumn() + "]");
                                    
                                        // Si no son mismo tipo. ID debe ser expresion ENTERA
                                        if ( !(tipo.getName() == exp.getTipo().getName()) ){ 
                                            if ( (tipo.getName().equals("INTEGER")&& exp.getTipo().getName().equals("POINTER")) ){
                                            
                                            }else{
                                                semanticErrorManager.semanticFatalError ("284. La Asignacion: " + id.getLexema() +" en [" + 
                                                   	id.getLine() + ":" + id.getColumn() + "] no coincide en tipos.");
                                            }                
                                     }


                                   
                                  }    
                                }   
                                
                               
                                RESULT=bloque;
					
                             }
                		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentenciaIf ::= IF expresion THEN listaSentencias ELSE listaSentencias END IF PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sent1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sent1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		BloqueSentencias sent1 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sent2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sent2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueSentencias sent2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			semanticErrorManager.semanticInfo ("Sentencia IF con ELSE en [" +id.getLine() + ":" + id.getColumn()+"]");
                               
                            if ( !(exp.getTipo().getName().equals("BOOLEAN")) ) 
                                semanticErrorManager.semanticFatalError ("330. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es LOGICA.");
                                BloqueSentencias bloque = new BloqueSentencias();
								ScopeIF scope = scopeManager.getCurrentScope();
				

                                RESULT=bloque;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentenciaIf ::= IF expresion THEN listaSentencias END IF PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
					semanticErrorManager.semanticInfo ("Sentencia IF simple en [" +id.getLine() + ":" + id.getColumn()+"]");
                            if ( !(exp.getTipo().getName().equals("BOOLEAN")) ) 
                                  semanticErrorManager.semanticFatalError ("328. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es LOGICA.");
                                  BloqueSentencias bloque = new BloqueSentencias();
				  				  ScopeIF scope = scopeManager.getCurrentScope();
                                  
                                  RESULT=bloque;

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentenciaWhile ::= WHILE expresion LOOP listaSentencias END LOOP PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

		semanticErrorManager.semanticInfo("Sentencia WHILE en [" + id.getLine() + ":" + id.getColumn() + "]");
                              if ( !(exp.getTipo().getName().equals("BOOLEAN")) )
                                    semanticErrorManager.semanticFatalError ("326. La expresion sentencia WHILE no es BOOLEANA.");
                              BloqueSentencias bloque = new BloqueSentencias();
                              ScopeIF scope = scopeManager.getCurrentScope();
					
                             
                              RESULT=bloque;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentenciaPutLine ::= PUTLINE PARENTESISIZQ expresion PARENTESISDER PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    
    
            semanticErrorManager.semanticInfo ("La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] es de tipo "+ exp.getTipo().getName()+".");
		              
            BloqueSentencias bloque = new BloqueSentencias();
            ScopeIF scope = scopeManager.getCurrentScope();
			RESULT=bloque;
	   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaPutLine",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentenciaPutLine ::= PUTLINE PARENTESISIZQ CARACTERESCADENA PARENTESISDER PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token cad = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
     	semanticErrorManager.semanticInfo ("La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] es una CADENA DE CARACTERES.");
       
     	BloqueSentencias bloque = new BloqueSentencias();
				ScopeIF scope = scopeManager.getCurrentScope();
				cadenas.add(cad.getLexema());
					RESULT=bloque;		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaPutLine",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= sentenciaProcedimiento 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= sentenciaPutLine 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= sentenciaWhile 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= sentenciaIf 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= sentenciaAsignacion 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listaSentencias ::= listaSentencias sentencia 
            {
              BloqueSentencias RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueSentencias blq = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					BloqueSentencias bloque = new BloqueSentencias();
                                       
					RESULT=bloque;

				    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaSentencias ::= sentencia 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=sent;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // procedimiento ::= procedure PARENTESISIZQ parametros PARENTESISDER IS cuerpo 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // procedimiento ::= procedure PARENTESISIZQ parametros PARENTESISDER IS cabecera cuerpo 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpoFuncion ::= BEGIN RETURN expresion PUNTOYCOMA END ID PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
				BloqueSentencias bloque = new BloqueSentencias();
				 RESULT=bloque;
					 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cuerpoFuncion ::= BEGIN listaSentencias RETURN expresion PUNTOYCOMA END ID PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
				 RESULT=bloque;
					 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // funcion ::= FUNCTION ID error RETURN tipos IS cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
		syntaxErrorManager.syntaxFatalError("001. Faltan los DOS PARENTESIS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funcion ::= FUNCTION ID PARENTESISIZQ PARENTESISDER RETURN tipos IS NT$4 cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                BloqueSentencias bloque = new BloqueSentencias();
                               
                                ScopeIF scope = scopeManager.getCurrentScope();
                                TypeFunction tipoFuncion = (TypeFunction) scopeManager.searchType(scope.getName());
                                

                                // Cerramos Scope
                               scopeManager.closeScope();

                                // Comprobar que hay return de la funcion

                                if  (! tipoFuncion.getHayRetorno())
                                    semanticErrorManager.semanticFatalError("352. La funcion "+tipoFuncion.getName()+" no tiene retorno"); 
                                RESULT=bloque;
              

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$4 ::= 
            {
              BloqueSentencias RESULT =null;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

 				// la funcion ha sido declarada
                            if (scopeManager.containsSymbol(idFunc.getLexema())) {
				semanticErrorManager.semanticFatalError("350. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" ya ha sido declarada");
                            }else{ 
                                
				// Crear FUNCION en ambito
				ScopeIF scope = scopeManager.getCurrentScope();
                                TypeTableIF tablaTipos = scope.getTypeTable();
	  			SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							
                                // a�adir funcion a TT
                               	TypeFunction tipoFuncion = new TypeFunction(scope, idFunc.getLexema());
				tablaTipos.addType(idFunc.getLexema(), tipoFuncion);
							
				// a�adir funcion a TS
                                SymbolFunction simboloFunc = new SymbolFunction(scope,idFunc.getLexema(),tablaTipos.getType(idFunc.getLexema()));
				tablaSimbolos.addSymbol(idFunc.getLexema(), simboloFunc);
							
				// NUEVO ambito para funcion y tabla TS y TT
				scopeManager.openScope(idFunc.getLexema()); 
                                
														
				tablaTipos = scopeManager.getCurrentScope().getTypeTable();
				tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();

                                // Grabo tipo retorno
				tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));

					 
       
                tipoFuncion.setHayRetorno(true);
                               
                                
                              }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funcion ::= FUNCTION ID PARENTESISIZQ lista_parametros PARENTESISDER RETURN tipos IS NT$3 cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                BloqueSentencias bloque = new BloqueSentencias();
                               
                                ScopeIF scope = scopeManager.getCurrentScope();
                                TypeFunction tipoFuncion = (TypeFunction) scopeManager.searchType(scope.getName());
                                

                                // Cerramos Scope
                               scopeManager.closeScope();

                                // Comprobar que hay return de la funcion

                                if  (! tipoFuncion.getHayRetorno())
                                    semanticErrorManager.semanticFatalError("352. La funcion "+tipoFuncion.getName()+" no tiene retorno"); 
                                RESULT=bloque;
              

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$3 ::= 
            {
              BloqueSentencias RESULT =null;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

 				// la funcion ha sido declarada
                            if (scopeManager.containsSymbol(idFunc.getLexema())) {
				semanticErrorManager.semanticFatalError("350. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" ya ha sido declarada");
                            }else{ 
                                
				// Crear FUNCION en ambito
				ScopeIF scope = scopeManager.getCurrentScope();
                                TypeTableIF tablaTipos = scope.getTypeTable();
	  			SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							
                                // a�adir funcion a TT
                               	TypeFunction tipoFuncion = new TypeFunction(scope, idFunc.getLexema());
				tablaTipos.addType(idFunc.getLexema(), tipoFuncion);
							
				// a�adir funcion a TS
                                SymbolFunction simboloFunc = new SymbolFunction(scope,idFunc.getLexema(),tablaTipos.getType(idFunc.getLexema()));
				tablaSimbolos.addSymbol(idFunc.getLexema(), simboloFunc);
							
				// NUEVO ambito para funcion y tabla TS y TT
				scopeManager.openScope(idFunc.getLexema()); 
                                
														
				tablaTipos = scopeManager.getCurrentScope().getTypeTable();
				tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();

                                // Grabo tipo retorno
				tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));

				// Grabo parametros funcion
                                // ListaObjetos parametros = new ListaObjetos(listaArg) 
				ArrayList parametros = new ArrayList(Utilidades.ordenaParametros(listaArg));
                                
        			for (int i=0; i<parametros.size(); i++){
                                    Parametro p = (Parametro) parametros.get(i);
                                    SymbolVariable simboloVar = new SymbolVariable (scopeManager.getCurrentScope(), p.getNombre(), p.getTipo(), despl);
                                    
                                    // Creo lista ordenada de parametros en el PROCEDIMIENTO.
                                    tipoFuncion.setTypeParametro(p.getColumna(),p.getTipo()); 
                                    // Fijar paso parametros Ref/Valor en Symbolvar
                                    simboloVar.setReferencia(p.getReferencia());
                                    tablaSimbolos.addSymbol(p.getNombre(),simboloVar);                                  	
                                    tipoFuncion.setParametro(simboloVar);
                                } 
       
                                tipoFuncion.setHayRetorno(true);
                               
                                
                              }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funcion ::= FUNCTION ID PARENTESISIZQ PARENTESISDER RETURN tipos IS NT$2 cabecera cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueSentencias bloque1 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                BloqueSentencias bloque = new BloqueSentencias();
                               
                                ScopeIF scope = scopeManager.getCurrentScope();
                                TypeFunction tipoFuncion = (TypeFunction) scopeManager.searchType(scope.getName());
                                

                                // Cerramos Scope
                               scopeManager.closeScope();

                                // Comprobar que hay return de la funcion

                                if  (! tipoFuncion.getHayRetorno())
                                    semanticErrorManager.semanticFatalError("352. La funcion "+tipoFuncion.getName()+" no tiene retorno"); 
                                RESULT=bloque;
              

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              BloqueSentencias RESULT =null;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

 				// la funcion ha sido declarada
                            if (scopeManager.containsSymbol(idFunc.getLexema())) {
				semanticErrorManager.semanticFatalError("350. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" ya ha sido declarada");
                            }else{ 
                                
				// Crear FUNCION en ambito
				ScopeIF scope = scopeManager.getCurrentScope();
                                TypeTableIF tablaTipos = scope.getTypeTable();
	  			SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							
                                // a�adir funcion a TT
                               	TypeFunction tipoFuncion = new TypeFunction(scope, idFunc.getLexema());
				tablaTipos.addType(idFunc.getLexema(), tipoFuncion);
							
				// a�adir funcion a TS
                                SymbolFunction simboloFunc = new SymbolFunction(scope,idFunc.getLexema(),tablaTipos.getType(idFunc.getLexema()));
				tablaSimbolos.addSymbol(idFunc.getLexema(), simboloFunc);
							
				// NUEVO ambito para funcion y tabla TS y TT
				scopeManager.openScope(idFunc.getLexema()); 
                                
														
				tablaTipos = scopeManager.getCurrentScope().getTypeTable();
				tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();

                                // Grabo tipo retorno
				tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));

					 
       
                tipoFuncion.setHayRetorno(true);
                               
                                
                              }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= FUNCTION ID PARENTESISIZQ lista_parametros PARENTESISDER RETURN tipos IS NT$1 cabecera cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueSentencias bloque1 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                BloqueSentencias bloque = new BloqueSentencias();
                               
                                ScopeIF scope = scopeManager.getCurrentScope();
                                TypeFunction tipoFuncion = (TypeFunction) scopeManager.searchType(scope.getName());
                                

                                // Cerramos Scope
                               scopeManager.closeScope();

                                // Comprobar que hay return de la funcion

                                if  (! tipoFuncion.getHayRetorno())
                                    semanticErrorManager.semanticFatalError("352. La funcion "+tipoFuncion.getName()+" no tiene retorno"); 
                                RESULT=bloque;
              

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$1 ::= 
            {
              BloqueSentencias RESULT =null;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

 				// la funcion ha sido declarada
                            if (scopeManager.containsSymbol(idFunc.getLexema())) {
				semanticErrorManager.semanticFatalError("350. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" ya ha sido declarada");
                            }else{ 
                                
				// Crear FUNCION en ambito
				ScopeIF scope = scopeManager.getCurrentScope();
                                TypeTableIF tablaTipos = scope.getTypeTable();
	  			SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							
                                // a�adir funcion a TT
                               	TypeFunction tipoFuncion = new TypeFunction(scope, idFunc.getLexema());
				tablaTipos.addType(idFunc.getLexema(), tipoFuncion);
							
				// a�adir funcion a TS
                                SymbolFunction simboloFunc = new SymbolFunction(scope,idFunc.getLexema(),tablaTipos.getType(idFunc.getLexema()));
				tablaSimbolos.addSymbol(idFunc.getLexema(), simboloFunc);
							
				// NUEVO ambito para funcion y tabla TS y TT
				scopeManager.openScope(idFunc.getLexema()); 
                                
														
				tablaTipos = scopeManager.getCurrentScope().getTypeTable();
				tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();

                                // Grabo tipo retorno
				tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));

				// Grabo parametros funcion
                                // ListaObjetos parametros = new ListaObjetos(listaArg) 
				ArrayList parametros = new ArrayList(Utilidades.ordenaParametros(listaArg));
                                
        			for (int i=0; i<parametros.size(); i++){
                                    Parametro p = (Parametro) parametros.get(i);
                                    SymbolVariable simboloVar = new SymbolVariable (scopeManager.getCurrentScope(), p.getNombre(), p.getTipo(), despl);
                                    
                                    // Creo lista ordenada de parametros en el PROCEDIMIENTO.
                                    tipoFuncion.setTypeParametro(p.getColumna(),p.getTipo()); 
                                    // Fijar paso parametros Ref/Valor en Symbolvar
                                    simboloVar.setReferencia(p.getReferencia());
                                    tablaSimbolos.addSymbol(p.getNombre(),simboloVar);                                  	
                                    tipoFuncion.setParametro(simboloVar);
                                } 
       
                                tipoFuncion.setHayRetorno(true);
                               
                                
                              }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionSubPrograma ::= funcion 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubPrograma",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionSubPrograma ::= procedimiento 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubPrograma",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionVariable ::= idParametros ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaObjetos list = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tableSymbol=scope.getSymbolTable();
	TypeTableIF tableType=scope.getTypeTable();

	//Añadir el tipo de variable a la lista
	ListaObjetos var=new ListaObjetos(list);
	for(int i=var.size()-1; i>=0;i--){
		Var v=(Var)var.get(i);
		//Comprobar que no esté definido el mismo ámbito
		if(!scope.getSymbolTable().containsSymbol(v.getName())){
			SymbolVariable symbolVariable=new SymbolVariable(scope, v.getName(),scopeManager.searchType(type.getLexema()));
			tableSymbol.addSymbol(v.getName(),symbolVariable);
			if(tableType.getType(type.getLexema()) instanceof TypeArray){
				TypeArray typeArray = (TypeArray) symbolVariable.getType();
			}
		}else{
			semanticErrorManager.semanticFatalError("La variable "+v.getName()+" en la linea "+v.getLine()+" y columna "+v.getColumn()+" ya ha sido declarada");
		}
	}
	if(!scopeManager.containsType(type.getLexema())){
		semanticErrorManager.semanticFatalError("La variable "+type.getLexema()+" en la linea "+type.getLine()+" y columna "+type.getColumn()+" no ha sido declarada");
	}else{
		TypeIF typeIf=scopeManager.searchType(type.getLexema());
		if( !(typeIf instanceof TypeArray)){
			semanticErrorManager.semanticFatalError("La variable "+type.getLexema()+" en la linea "+type.getLine()+" y columna "+type.getColumn()+" no es del tipo RECORD/ARRAY");
		}
	}	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionVariable ::= idParametros BOOLEAN PUNTOYCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaObjetos list = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tableSymbol=scope.getSymbolTable();
	
	//Añadir el tipo de variable a la lista
	ListaObjetos var=new ListaObjetos(list);
	for(int i=var.size()-1; i>=0;i--){
		Var v=(Var)var.get(i);
		//Comprobar que no esté definido el mismo ámbito
		if(!scope.getSymbolTable().containsSymbol(v.getName())){
			SymbolVariable symbolVariable=new SymbolVariable(scope, v.getName(), scopeManager.searchType("BOOLEAN"));
			tableSymbol.addSymbol(v.getName(),symbolVariable);
		}else{
			semanticErrorManager.semanticFatalError("La variable "+v.getName()+" en la linea "+v.getLine()+" y columna "+v.getColumn()+" ya ha sido declarada");
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionVariable ::= idParametros INTEGER PUNTOYCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaObjetos list = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tableSymbol=scope.getSymbolTable();

	//Añadir el tipo de variable a la lista
	ListaObjetos var=new ListaObjetos(list);
	for(int i=var.size()-1; i>=0;i--){
		Var v=(Var)var.get(i);
		//Comprobar que no esté definido el mismo ámbito
		if(!scope.getSymbolTable().containsSymbol(v.getName())){
			SymbolVariable symbolVariable=new SymbolVariable(scope, v.getName(), scopeManager.searchType("INTEGER"));
			tableSymbol.addSymbol(v.getName(),symbolVariable);
		}else{
			semanticErrorManager.semanticFatalError("La variable "+v.getName()+" en la linea "+v.getLine()+" y columna "+v.getColumn()+" ya ha sido declarada");
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionTipo ::= TYPE ID IS ARRAY PARENTESISIZQ ENTERO PUNTOPUNTO ENTERO PARENTESISDER OF ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token value1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token value2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token typeId = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si el tipo está declarado en el ambito --> error: ya ha sido declarado
	//si no --> declararlo	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" ya ha sido declarado");
	}else{
		TypeTableIF tableType=scope.getTypeTable();
		TypeArray typeArray =new TypeArray (scope, name);
		typeArray.setValIni (Integer.parseInt(value1.getLexema()));
		typeArray.setValFin (Integer.parseInt(value2.getLexema()));
		typeArray.setTipo (scopeManager.searchType(typeId.getLexema()));
		tableType.addType(name,typeArray);
		TypeIF typeVar=scopeManager.searchType(typeId.getLexema());
		if(!(typeVar instanceof TypeRecord) && !(typeVar instanceof TypeArray)){
			semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" no es del tipo RECORD/ARRAY");
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionTipo ::= TYPE ID IS ARRAY PARENTESISIZQ ENTERO PUNTOPUNTO ENTERO PARENTESISDER OF BOOLEAN PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token value1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token value2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si el tipo está declarado en el ambito --> error: ya ha sido declarado
	//si no --> declararlo	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" ya ha sido declarado");
	}else{
		TypeTableIF tableType=scope.getTypeTable();
		TypeArray typeArray =new TypeArray (scope, name);
		typeArray.setValIni (Integer.parseInt(value1.getLexema()));
		typeArray.setValFin (Integer.parseInt(value2.getLexema()));
		typeArray.setTipo (scopeManager.searchType("BOOLEAN"));
		tableType.addType(name,typeArray);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionTipo ::= TYPE ID IS ARRAY PARENTESISIZQ ENTERO PUNTOPUNTO ENTERO PARENTESISDER OF INTEGER PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token value1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token value2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si el tipo está declarado en el ambito --> error: ya ha sido declarado
	//si no --> declararlo	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" ya ha sido declarado");
	}else{
		TypeTableIF tableType=scope.getTypeTable();
		TypeArray typeArray =new TypeArray (scope, name);
		typeArray.setValIni (Integer.parseInt(value1.getLexema()));
		typeArray.setValFin (Integer.parseInt(value2.getLexema()));
		typeArray.setTipo (scopeManager.searchType("INTEGER"));
		tableType.addType(name,typeArray);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracionConstanteSimbolica ::= ID DOSPUNTOS CONSTANT ASIGNACION tipoBooleano PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si la cte está declarada en el ambito --> error: ya ha sido declarada
	//si no --> declararla	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("La CONSTANTE "+name+" en la linea "+id.getLine()+" ya ha sido declarada");
	}else{
		SymbolTableIF tableSymbol=scope.getSymbolTable();
		SymbolConstant constantSymbol=new SymbolConstant(scope,name, scopeManager.searchType("BOOLEAN"));
		if (valor.getLexema().equalsIgnoreCase("TRUE")) 
			constantSymbol.setValue(1);
		else 
			constantSymbol.setValue(0);
		tableSymbol.addSymbol(name,constantSymbol);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstanteSimbolica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionConstanteSimbolica ::= ID DOSPUNTOS CONSTANT ASIGNACION ENTERO PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String name=id.getLexema();
	SymbolTableIF sTable=scopeManager.getCurrentScope().getSymbolTable();
	
	//si la cte está declarada en el ambito --> error: ya ha sido declarada
	//si no --> declararla	
	if(sTable.containsSymbol(name)){
		semanticErrorManager.semanticFatalError("La CONSTANTE "+name+" en la linea "+id.getLine()+" ya ha sido declarada");
	}else{
		SymbolConstant sc= new SymbolConstant (scopeManager.getCurrentScope(),name,scopeManager.searchType("INTEGER"));
		sTable.addSymbol(name,sc);
		sc.setValue(Integer.parseInt(value.getLexema()));
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstanteSimbolica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // seccionSubProgramas ::= seccionSubProgramas declaracionSubPrograma 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubProgramas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // seccionSubProgramas ::= declaracionSubPrograma 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubProgramas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // seccionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seccionTipos ::= seccionTipos declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // seccionTipos ::= declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // seccionConstantesSimbolicas ::= seccionConstantesSimbolicas declaracionConstanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantesSimbolicas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // seccionConstantesSimbolicas ::= declaracionConstanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantesSimbolicas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cabecera ::= seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cabecera ::= seccionVariables 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cabecera ::= seccionVariables seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cabecera ::= seccionTipos 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cabecera ::= seccionTipos seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cabecera ::= seccionTipos seccionVariables 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cabecera ::= seccionTipos seccionVariables seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cabecera ::= seccionConstantesSimbolicas 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cabecera ::= seccionConstantesSimbolicas seccionVariables 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera ::= seccionConstantesSimbolicas seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cabecera ::= seccionConstantesSimbolicas seccionTipos seccionVariables 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cabecera ::= seccionConstantesSimbolicas seccionTipos seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cabecera ::= seccionConstantesSimbolicas seccionVariables seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cabecera ::= seccionConstantesSimbolicas seccionTipos seccionVariables seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // procedure ::= PROCEDURE error 
            {
              BloqueSentencias RESULT =null;
		syntaxErrorManager.syntaxFatalError("002. Error en el nombre del programa");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // procedure ::= PROCEDURE ID 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	String name=id.getLexema();
	scopeManager.openScope(name);
	
	//Insertar todos los TypesSimple en la TT
	ScopeIF scope = scopeManager.getCurrentScope();
	TypeTableIF tableTypes =scope.getTypeTable();
	TypeInteger typeInteger = new TypeInteger(scope);
	TypeBoolean typeBoolean = new TypeBoolean(scope);
	TypeArray typeArray = new TypeArray(scope);
	tableTypes.addType(typeInteger);
	tableTypes.addType(typeBoolean);
	tableTypes.addType(typeArray);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom ::= ID error PARENTESISIZQ PARENTESISDER IS cabecera cuerpo 
            {
              Axiom RESULT =null;
		syntaxErrorManager.syntaxFatalError("003. Palabra PROCEDURE no definida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= procedure error PARENTESISIZQ PARENTESISDER IS cabecera cuerpo 
            {
              Axiom RESULT =null;
		syntaxErrorManager.syntaxFatalError("001. No se ha especificado nombre del progama");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= procedure PARENTESISIZQ PARENTESISDER IS cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= procedure PARENTESISIZQ PARENTESISDER IS cabecera cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden anadir mas acciones semanticas
  		// Comentar estas lineas para el 1er cuatrimestre
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

