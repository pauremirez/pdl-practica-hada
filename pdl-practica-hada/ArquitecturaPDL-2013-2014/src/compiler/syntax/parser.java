
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 07 17:08:51 CEST 2014
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 07 17:08:51 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\046\002\000\002\003" +
    "\004\000\002\002\010\000\002\002\007\000\002\002\011" +
    "\000\002\002\011\000\002\045\004\000\002\045\004\000" +
    "\002\036\006\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\004\000\002\036\004\000\002\036" +
    "\003\000\002\036\005\000\002\036\004\000\002\036\004" +
    "\000\002\036\003\000\002\036\004\000\002\036\003\000" +
    "\002\036\003\000\002\007\003\000\002\007\004\000\002" +
    "\004\003\000\002\004\004\000\002\005\003\000\002\005" +
    "\004\000\002\006\003\000\002\006\004\000\002\010\010" +
    "\000\002\010\010\000\002\011\016\000\002\011\016\000" +
    "\002\011\016\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\013\003\000\002\013\003\000\002\047" +
    "\002\000\002\014\015\000\002\050\002\000\002\014\014" +
    "\000\002\051\002\000\002\014\014\000\002\052\002\000" +
    "\002\014\013\000\002\014\011\000\002\035\010\000\002" +
    "\035\007\000\002\053\002\000\002\015\013\000\002\054" +
    "\002\000\002\015\012\000\002\022\003\000\002\022\004" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\004\000\002" +
    "\025\007\000\002\025\007\000\002\026\011\000\002\027" +
    "\011\000\002\027\013\000\002\030\006\000\002\030\010" +
    "\000\002\030\012\000\002\030\011\000\002\040\006\000" +
    "\002\041\003\000\002\041\005\000\002\024\007\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\005\000\002\032\007\000\002" +
    "\032\003\000\002\032\003\000\002\032\006\000\002\033" +
    "\003\000\002\033\003\000\002\034\002\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\044\003\000" +
    "\002\044\003\000\002\037\007\000\002\055\002\000\002" +
    "\037\007\000\002\017\005\000\002\017\003\000\002\021" +
    "\004\000\002\021\005\000\002\020\006\000\002\020\010" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\006\024\000\053\000\001\002\000\004\002" +
    "\u0101\001\002\000\006\024\010\053\006\001\002\000\004" +
    "\003\373\001\002\000\004\002\uffff\001\002\000\006\003" +
    "\372\053\371\001\002\000\006\003\012\034\013\001\002" +
    "\000\004\034\364\001\002\000\004\035\014\001\002\000" +
    "\004\017\015\001\002\000\014\006\032\014\025\024\016" +
    "\031\034\053\030\001\002\000\004\053\352\001\002\000" +
    "\010\006\uffda\014\uffda\024\uffda\001\002\000\014\006\uffea" +
    "\014\uffea\024\uffea\031\uffea\053\uffea\001\002\000\004\002" +
    "\ufffd\001\002\000\012\006\uffec\014\025\024\016\053\050" +
    "\001\002\000\014\006\uffe8\014\uffe8\024\uffe8\031\uffe8\053" +
    "\uffe8\001\002\000\014\006\uffee\014\025\024\016\031\034" +
    "\053\050\001\002\000\004\053\264\001\002\000\004\006" +
    "\032\001\002\000\012\006\uffe6\014\uffe6\024\uffe6\053\uffe6" +
    "\001\002\000\006\040\051\042\254\001\002\000\010\007" +
    "\250\016\246\053\247\001\002\000\016\012\uff9b\015\104" +
    "\025\077\026\107\032\076\053\105\001\002\000\004\006" +
    "\uffeb\001\002\000\004\053\057\001\002\000\014\006\ufff2" +
    "\014\025\024\016\031\034\053\030\001\002\000\010\006" +
    "\uffd9\014\uffd9\024\uffd9\001\002\000\010\006\uffe4\014\025" +
    "\024\016\001\002\000\004\006\uffe3\001\002\000\014\006" +
    "\uffe9\014\uffe9\024\uffe9\031\uffe9\053\uffe9\001\002\000\012" +
    "\006\ufff3\014\025\024\016\053\050\001\002\000\004\006" +
    "\ufff4\001\002\000\012\014\025\024\016\031\034\053\050" +
    "\001\002\000\014\006\uffe7\014\uffe7\024\uffe7\031\uffe7\053" +
    "\uffe7\001\002\000\012\006\ufff5\014\025\024\016\053\050" +
    "\001\002\000\004\006\ufff6\001\002\000\006\040\051\042" +
    "\052\001\002\000\004\053\050\001\002\000\010\007\uff97" +
    "\016\uff97\053\uff97\001\002\000\010\007\uff96\016\uff96\053" +
    "\uff96\001\002\000\012\006\uffe5\014\uffe5\024\uffe5\053\uffe5" +
    "\001\002\000\004\006\ufff8\001\002\000\004\006\ufff7\001" +
    "\002\000\004\017\060\001\002\000\004\005\061\001\002" +
    "\000\004\034\062\001\002\000\004\054\063\001\002\000" +
    "\004\055\064\001\002\000\004\054\065\001\002\000\004" +
    "\035\066\001\002\000\004\021\067\001\002\000\010\007" +
    "\072\016\071\053\070\001\002\000\004\041\075\001\002" +
    "\000\004\041\074\001\002\000\004\041\073\001\002\000" +
    "\014\006\uffdf\014\uffdf\024\uffdf\031\uffdf\053\uffdf\001\002" +
    "\000\014\006\uffe0\014\uffe0\024\uffe0\031\uffe0\053\uffe0\001" +
    "\002\000\014\006\uffde\014\uffde\024\uffde\031\uffde\053\uffde" +
    "\001\002\000\014\013\121\030\117\034\120\053\116\054" +
    "\124\001\002\000\004\034\231\001\002\000\022\011\uffc7" +
    "\012\uffc7\015\uffc7\025\uffc7\026\uffc7\032\uffc7\041\uffc7\053" +
    "\uffc7\001\002\000\004\012\226\001\002\000\022\011\uffc9" +
    "\012\uffc9\015\104\025\077\026\107\032\076\041\uffc9\053" +
    "\105\001\002\000\022\011\uffc4\012\uffc4\015\uffc4\025\uffc4" +
    "\026\uffc4\032\uffc4\041\uffc4\053\uffc4\001\002\000\014\013" +
    "\121\030\117\034\120\053\116\054\124\001\002\000\010" +
    "\034\166\051\165\052\164\001\002\000\022\011\uffc5\012" +
    "\uffc5\015\uffc5\025\uffc5\026\uffc5\032\uffc5\041\uffc5\053\uffc5" +
    "\001\002\000\014\013\121\030\117\034\120\053\116\054" +
    "\124\001\002\000\022\011\uffc3\012\uffc3\015\uffc3\025\uffc3" +
    "\026\uffc3\032\uffc3\041\uffc3\053\uffc3\001\002\000\022\011" +
    "\uffc6\012\uffc6\015\uffc6\025\uffc6\026\uffc6\032\uffc6\041\uffc6" +
    "\053\uffc6\001\002\000\004\012\113\001\002\000\004\053" +
    "\114\001\002\000\004\041\115\001\002\000\012\002\uff9a" +
    "\006\uff9a\014\uff9a\024\uff9a\001\002\000\056\004\uffab\011" +
    "\uffab\012\uffab\015\uffab\020\uffab\022\uffab\025\uffab\026\uffab" +
    "\027\uffab\032\uffab\034\151\035\uffab\040\uffab\041\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\052\150" +
    "\053\uffab\001\002\000\052\004\uffa4\011\uffa4\012\uffa4\015" +
    "\uffa4\020\uffa4\022\uffa4\025\uffa4\026\uffa4\027\uffa4\032\uffa4" +
    "\035\uffa4\040\uffa4\041\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\053\uffa4\001\002\000\014\013\121" +
    "\030\117\034\120\053\116\054\124\001\002\000\052\004" +
    "\uffa3\011\uffa3\012\uffa3\015\uffa3\020\uffa3\022\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\032\uffa3\035\uffa3\040\uffa3\041\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\053\uffa3" +
    "\001\002\000\052\004\uffa7\011\uffa7\012\uffa7\015\uffa7\020" +
    "\uffa7\022\uffa7\025\uffa7\026\uffa7\027\uffa7\032\uffa7\035\uffa7" +
    "\040\uffa7\041\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\053\uffa7\001\002\000\052\004\uffa6\011\uffa6" +
    "\012\uffa6\015\uffa6\020\uffa6\022\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\032\uffa6\035\uffa6\040\uffa6\041\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\050\uffa6\053\uffa6\001\002\000" +
    "\052\004\uffaa\011\uffaa\012\uffaa\015\uffaa\020\uffaa\022\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\032\uffaa\035\uffaa\040\uffaa\041" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\053\uffaa\001\002\000\042\004\126\011\uffc2\012\uffc2\015" +
    "\uffc2\022\135\025\uffc2\026\uffc2\032\uffc2\041\uffc2\043\134" +
    "\044\133\045\130\046\131\047\132\050\127\053\uffc2\001" +
    "\002\000\014\013\121\030\117\034\120\053\116\054\124" +
    "\001\002\000\014\013\121\030\117\034\120\053\116\054" +
    "\124\001\002\000\014\013\121\030\117\034\120\053\116" +
    "\054\124\001\002\000\014\013\121\030\117\034\120\053" +
    "\116\054\124\001\002\000\014\013\121\030\117\034\120" +
    "\053\116\054\124\001\002\000\014\013\121\030\117\034" +
    "\120\053\116\054\124\001\002\000\014\013\121\030\117" +
    "\034\120\053\116\054\124\001\002\000\014\013\121\030" +
    "\117\034\120\053\116\054\124\001\002\000\052\004\uffb2" +
    "\011\uffb2\012\uffb2\015\uffb2\020\uffb2\022\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\032\uffb2\035\uffb2\040\uffb2\041\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\053\uffb2\001" +
    "\002\000\052\004\uffb4\011\uffb4\012\uffb4\015\uffb4\020\uffb4" +
    "\022\135\025\uffb4\026\uffb4\027\uffb4\032\uffb4\035\uffb4\040" +
    "\uffb4\041\uffb4\043\uffb4\044\133\045\130\046\131\047\132" +
    "\050\127\053\uffb4\001\002\000\052\004\uffaf\011\uffaf\012" +
    "\uffaf\015\uffaf\020\uffaf\022\135\025\uffaf\026\uffaf\027\uffaf" +
    "\032\uffaf\035\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\050\127\053\uffaf\001\002\000\052" +
    "\004\uffad\011\uffad\012\uffad\015\uffad\020\uffad\022\135\025" +
    "\uffad\026\uffad\027\uffad\032\uffad\035\uffad\040\uffad\041\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\127\053" +
    "\uffad\001\002\000\052\004\uffae\011\uffae\012\uffae\015\uffae" +
    "\020\uffae\022\135\025\uffae\026\uffae\027\uffae\032\uffae\035" +
    "\uffae\040\uffae\041\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\127\053\uffae\001\002\000\052\004\uffb0\011" +
    "\uffb0\012\uffb0\015\uffb0\020\uffb0\022\135\025\uffb0\026\uffb0" +
    "\027\uffb0\032\uffb0\035\uffb0\040\uffb0\041\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\127\053\uffb0\001\002" +
    "\000\052\004\uffb1\011\uffb1\012\uffb1\015\uffb1\020\uffb1\022" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\032\uffb1\035\uffb1\040\uffb1" +
    "\041\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\053\uffb1\001\002\000\052\004\uffb3\011\uffb3\012\uffb3" +
    "\015\uffb3\020\uffb3\022\135\025\uffb3\026\uffb3\027\uffb3\032" +
    "\uffb3\035\uffb3\040\uffb3\041\uffb3\043\uffb3\044\133\045\130" +
    "\046\131\047\132\050\127\053\uffb3\001\002\000\024\004" +
    "\126\022\135\035\147\043\134\044\133\045\130\046\131" +
    "\047\132\050\127\001\002\000\052\004\uffac\011\uffac\012" +
    "\uffac\015\uffac\020\uffac\022\uffac\025\uffac\026\uffac\027\uffac" +
    "\032\uffac\035\uffac\040\uffac\041\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\053\uffac\001\002\000\004" +
    "\053\161\001\002\000\014\013\121\030\117\034\120\053" +
    "\116\054\153\001\002\000\004\035\160\001\002\000\026" +
    "\004\uffaa\022\uffaa\035\157\040\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\001\002\000\026\004\126" +
    "\022\135\035\uffb7\040\155\043\134\044\133\045\130\046" +
    "\131\047\132\050\127\001\002\000\014\013\121\030\117" +
    "\034\120\053\116\054\124\001\002\000\004\035\uffb6\001" +
    "\002\000\052\004\uffa5\011\uffa5\012\uffa5\015\uffa5\020\uffa5" +
    "\022\uffa5\025\uffa5\026\uffa5\027\uffa5\032\uffa5\035\uffa5\040" +
    "\uffa5\041\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\053\uffa5\001\002\000\052\004\uffb8\011\uffb8\012" +
    "\uffb8\015\uffb8\020\uffb8\022\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\032\uffb8\035\uffb8\040\uffb8\041\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\053\uffb8\001\002\000\054" +
    "\004\uffa9\011\uffa9\012\uffa9\015\uffa9\020\uffa9\022\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\032\uffa9\035\uffa9\040\uffa9\041\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\052" +
    "\162\053\uffa9\001\002\000\004\053\163\001\002\000\052" +
    "\004\uffa8\011\uffa8\012\uffa8\015\uffa8\020\uffa8\022\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\032\uffa8\035\uffa8\040\uffa8\041\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\053" +
    "\uffa8\001\002\000\004\053\201\001\002\000\014\013\121" +
    "\030\117\034\120\053\116\054\124\001\002\000\014\013" +
    "\121\030\117\034\120\053\116\054\170\001\002\000\004" +
    "\035\175\001\002\000\026\004\uffaa\022\uffaa\035\171\040" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\001\002\000\004\051\172\001\002\000\014\013\121\030" +
    "\117\034\120\053\116\054\124\001\002\000\024\004\126" +
    "\022\135\041\174\043\134\044\133\045\130\046\131\047" +
    "\132\050\127\001\002\000\022\011\uffb9\012\uffb9\015\uffb9" +
    "\025\uffb9\026\uffb9\032\uffb9\041\uffb9\053\uffb9\001\002\000" +
    "\004\041\176\001\002\000\022\011\uffb5\012\uffb5\015\uffb5" +
    "\025\uffb5\026\uffb5\032\uffb5\041\uffb5\053\uffb5\001\002\000" +
    "\024\004\126\022\135\041\200\043\134\044\133\045\130" +
    "\046\131\047\132\050\127\001\002\000\022\011\uffbc\012" +
    "\uffbc\015\uffbc\025\uffbc\026\uffbc\032\uffbc\041\uffbc\053\uffbc" +
    "\001\002\000\006\051\203\052\202\001\002\000\004\053" +
    "\206\001\002\000\014\013\121\030\117\034\120\053\116" +
    "\054\124\001\002\000\024\004\126\022\135\041\205\043" +
    "\134\044\133\045\130\046\131\047\132\050\127\001\002" +
    "\000\022\011\uffbb\012\uffbb\015\uffbb\025\uffbb\026\uffbb\032" +
    "\uffbb\041\uffbb\053\uffbb\001\002\000\004\051\207\001\002" +
    "\000\014\013\121\030\117\034\120\053\116\054\124\001" +
    "\002\000\024\004\126\022\135\041\211\043\134\044\133" +
    "\045\130\046\131\047\132\050\127\001\002\000\022\011" +
    "\uffba\012\uffba\015\uffba\025\uffba\026\uffba\032\uffba\041\uffba" +
    "\053\uffba\001\002\000\024\004\126\022\135\027\213\043" +
    "\134\044\133\045\130\046\131\047\132\050\127\001\002" +
    "\000\014\015\104\025\077\026\107\032\076\053\105\001" +
    "\002\000\006\011\215\012\216\001\002\000\014\015\104" +
    "\025\077\026\107\032\076\053\105\001\002\000\004\015" +
    "\217\001\002\000\004\041\220\001\002\000\022\011\uffbe" +
    "\012\uffbe\015\uffbe\025\uffbe\026\uffbe\032\uffbe\041\uffbe\053" +
    "\uffbe\001\002\000\004\012\222\001\002\000\004\015\223" +
    "\001\002\000\004\041\224\001\002\000\022\011\uffbd\012" +
    "\uffbd\015\uffbd\025\uffbd\026\uffbd\032\uffbd\041\uffbd\053\uffbd" +
    "\001\002\000\010\011\uffc8\012\uffc8\041\uffc8\001\002\000" +
    "\004\053\227\001\002\000\004\041\230\001\002\000\012" +
    "\002\uff9c\006\uff9c\014\uff9c\024\uff9c\001\002\000\016\013" +
    "\121\030\117\034\120\053\116\054\124\056\233\001\002" +
    "\000\024\004\126\022\135\035\236\043\134\044\133\045" +
    "\130\046\131\047\132\050\127\001\002\000\004\035\234" +
    "\001\002\000\004\041\235\001\002\000\022\011\uffc1\012" +
    "\uffc1\015\uffc1\025\uffc1\026\uffc1\032\uffc1\041\uffc1\053\uffc1" +
    "\001\002\000\004\041\237\001\002\000\022\011\uffc0\012" +
    "\uffc0\015\uffc0\025\uffc0\026\uffc0\032\uffc0\041\uffc0\053\uffc0" +
    "\001\002\000\024\004\126\020\241\022\135\043\134\044" +
    "\133\045\130\046\131\047\132\050\127\001\002\000\014" +
    "\015\104\025\077\026\107\032\076\053\105\001\002\000" +
    "\004\012\243\001\002\000\004\020\244\001\002\000\004" +
    "\041\245\001\002\000\022\011\uffbf\012\uffbf\015\uffbf\025" +
    "\uffbf\026\uffbf\032\uffbf\041\uffbf\053\uffbf\001\002\000\004" +
    "\041\253\001\002\000\004\041\252\001\002\000\004\041" +
    "\251\001\002\000\012\006\uffdc\014\uffdc\024\uffdc\053\uffdc" +
    "\001\002\000\012\006\uffdb\014\uffdb\024\uffdb\053\uffdb\001" +
    "\002\000\012\006\uffdd\014\uffdd\024\uffdd\053\uffdd\001\002" +
    "\000\012\007\uff97\010\255\016\uff97\053\uff97\001\002\000" +
    "\004\051\256\001\002\000\010\013\121\030\117\054\260" +
    "\001\002\000\004\041\262\001\002\000\004\041\261\001" +
    "\002\000\014\006\uffe2\014\uffe2\024\uffe2\031\uffe2\053\uffe2" +
    "\001\002\000\014\006\uffe1\014\uffe1\024\uffe1\031\uffe1\053" +
    "\uffe1\001\002\000\004\002\ufffe\001\002\000\006\003\265" +
    "\034\266\001\002\000\004\026\342\001\002\000\006\035" +
    "\270\053\267\001\002\000\006\040\340\042\uff98\001\002" +
    "\000\004\026\330\001\002\000\004\035\305\001\002\000" +
    "\004\042\273\001\002\000\012\007\uffa2\016\uffa2\023\274" +
    "\053\uffa2\001\002\000\010\007\uff9e\016\uff9e\053\uff9e\001" +
    "\002\000\010\007\uff9d\016\uff9d\053\uff9d\001\002\000\010" +
    "\007\302\016\300\053\277\001\002\000\010\017\uff9f\035" +
    "\uff9f\041\uff9f\001\002\000\010\017\uffa1\035\uffa1\041\uffa1" +
    "\001\002\000\006\035\uff95\041\303\001\002\000\010\017" +
    "\uffa0\035\uffa0\041\uffa0\001\002\000\004\053\267\001\002" +
    "\000\004\035\uff94\001\002\000\004\026\306\001\002\000" +
    "\010\007\302\016\300\053\277\001\002\000\004\017\310" +
    "\001\002\000\014\006\uffd4\014\uffd8\024\uffd8\031\uffd8\053" +
    "\uffd8\001\002\000\004\006\315\001\002\000\012\014\025" +
    "\024\016\031\034\053\030\001\002\000\004\006\315\001" +
    "\002\000\010\006\uffd7\014\uffd7\024\uffd7\001\002\000\016" +
    "\015\104\025\077\026\107\032\076\041\317\053\105\001" +
    "\002\000\004\041\323\001\002\000\004\012\320\001\002" +
    "\000\004\053\321\001\002\000\004\041\322\001\002\000" +
    "\010\006\uffce\014\uffce\024\uffce\001\002\000\004\012\324" +
    "\001\002\000\004\053\325\001\002\000\004\041\326\001" +
    "\002\000\010\006\uffcf\014\uffcf\024\uffcf\001\002\000\010" +
    "\006\uffd3\014\uffd3\024\uffd3\001\002\000\010\007\302\016" +
    "\300\053\277\001\002\000\004\017\332\001\002\000\014" +
    "\006\uffd2\014\uffd6\024\uffd6\031\uffd6\053\uffd6\001\002\000" +
    "\012\014\025\024\016\031\034\053\030\001\002\000\004" +
    "\006\315\001\002\000\010\006\uffd1\014\uffd1\024\uffd1\001" +
    "\002\000\004\006\315\001\002\000\010\006\uffd5\014\uffd5" +
    "\024\uffd5\001\002\000\004\053\267\001\002\000\004\042" +
    "\uff99\001\002\000\010\007\302\016\300\053\277\001\002" +
    "\000\004\017\344\001\002\000\004\006\315\001\002\000" +
    "\010\006\uffd0\014\uffd0\024\uffd0\001\002\000\012\006\ufff0" +
    "\014\025\024\016\053\050\001\002\000\004\006\uffef\001" +
    "\002\000\004\006\ufff1\001\002\000\004\006\uffed\001\002" +
    "\000\004\034\353\001\002\000\004\053\267\001\002\000" +
    "\004\035\355\001\002\000\004\017\356\001\002\000\014" +
    "\006\uffcb\014\uffcd\024\uffcd\031\uffcd\053\uffcd\001\002\000" +
    "\004\006\032\001\002\000\012\014\025\024\016\031\034" +
    "\053\030\001\002\000\004\006\032\001\002\000\010\006" +
    "\uffcc\014\uffcc\024\uffcc\001\002\000\010\006\uffca\014\uffca" +
    "\024\uffca\001\002\000\004\035\365\001\002\000\004\017" +
    "\366\001\002\000\012\014\025\024\016\031\034\053\030" +
    "\001\002\000\004\006\032\001\002\000\004\002\ufffc\001" +
    "\002\000\006\003\ufffa\034\ufffa\001\002\000\006\003\ufff9" +
    "\034\ufff9\001\002\000\004\034\374\001\002\000\004\035" +
    "\375\001\002\000\004\017\376\001\002\000\012\014\025" +
    "\024\016\031\034\053\030\001\002\000\004\006\032\001" +
    "\002\000\004\002\ufffb\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\006\003\003\046\004\001\001\000\002\001" +
    "\001\000\006\002\006\045\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\023\005\021\006\032\007\034\010\017\011\022\012" +
    "\026\013\036\014\035\015\016\021\030\036\025\037\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\350\012\053\013\036" +
    "\014\035\015\016\021\030\001\001\000\002\001\001\000" +
    "\022\005\345\006\346\011\044\012\026\013\036\014\035" +
    "\015\016\021\030\001\001\000\002\001\001\000\004\037" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\022\100\023\101\024\107\025\102\026" +
    "\105\027\110\030\077\055\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\043\005\041\006\042\010" +
    "\040\011\022\012\026\013\036\014\035\015\016\021\030" +
    "\001\001\000\002\001\001\000\012\006\037\013\036\014" +
    "\035\015\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\055\012\053\013\036\014\035\015\016\021" +
    "\030\001\001\000\002\001\001\000\022\005\045\006\046" +
    "\011\044\012\026\013\036\014\035\015\016\021\030\001" +
    "\001\000\002\001\001\000\016\006\054\012\053\013\036" +
    "\014\035\015\016\021\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\237\033\122\040\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\224\023\101" +
    "\024\107\025\102\026\105\027\110\030\077\001\001\000" +
    "\002\001\001\000\010\032\211\033\122\040\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\124\033" +
    "\122\040\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\145\033\122\040\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\144\033\122\040\121\001\001\000" +
    "\010\032\143\033\122\040\121\001\001\000\010\032\142" +
    "\033\122\040\121\001\001\000\010\032\141\033\122\040" +
    "\121\001\001\000\010\032\140\033\122\040\121\001\001" +
    "\000\010\032\137\033\122\040\121\001\001\000\010\032" +
    "\136\033\122\040\121\001\001\000\010\032\135\033\122" +
    "\040\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\032\153" +
    "\033\122\040\121\041\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\032\153\033\122" +
    "\040\121\041\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\176\033" +
    "\122\040\121\001\001\000\012\032\153\033\122\040\121" +
    "\041\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\172\033\122\040\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\203\033\122\040" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\207\033\122\040\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\022\213\023\101\024\107\025\102\026\105\027\110\030" +
    "\077\001\001\000\002\001\001\000\020\022\220\023\101" +
    "\024\107\025\102\026\105\027\110\030\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\231\033\122\040\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\022\241\023\101\024\107\025\102" +
    "\026\105\027\110\030\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\271\020\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\274\044\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\271" +
    "\020\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\306\001\001\000\002\001\001\000\006\047\311" +
    "\051\310\001\001\000\004\035\326\001\001\000\032\004" +
    "\023\005\021\006\032\007\034\010\017\011\022\012\026" +
    "\013\036\014\035\015\016\021\030\036\312\001\001\000" +
    "\004\035\313\001\001\000\002\001\001\000\020\022\315" +
    "\023\101\024\107\025\102\026\105\027\110\030\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\330\001\001\000\002\001\001\000" +
    "\006\050\332\052\333\001\001\000\032\004\023\005\021" +
    "\006\032\007\034\010\017\011\022\012\026\013\036\014" +
    "\035\015\016\021\030\036\335\001\001\000\004\035\334" +
    "\001\001\000\002\001\001\000\004\035\336\001\001\000" +
    "\002\001\001\000\004\017\340\001\001\000\002\001\001" +
    "\000\004\042\342\001\001\000\002\001\001\000\004\035" +
    "\344\001\001\000\002\001\001\000\016\006\347\012\053" +
    "\013\036\014\035\015\016\021\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\271\020\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\053\357\054\356\001\001\000\004" +
    "\037\362\001\001\000\032\004\023\005\021\006\032\007" +
    "\034\010\017\011\022\012\026\013\036\014\035\015\016" +
    "\021\030\036\360\001\001\000\004\037\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\023\005\021\006\032\007\034\010" +
    "\017\011\022\012\026\013\036\014\035\015\016\021\030" +
    "\036\366\001\001\000\004\037\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\023\005" +
    "\021\006\032\007\034\010\017\011\022\012\026\013\036" +
    "\014\035\015\016\021\030\036\376\001\001\000\004\037" +
    "\377\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
		Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

	// Cadenas 
	List cadenas = new ArrayList();
	
	// Etiquetas 
	List etiqueta = new ArrayList();
	
	// Desplazamiento con RA principal
	int despl=5;

	// Desplazamiento x ambito
	HashMap desplScope = new HashMap(); 


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // lista_parametros ::= lista_argumentos DOSPUNTOS modo tipos PUNTOYCOMA lista_parametros 
            {
              ListaObjetos RESULT =null;
		int listaArg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaArg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListaObjetos listaArg1 = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaArg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaArg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaObjetos listaArg2 = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        					ListaObjetos lista1 = new ListaObjetos(listaArg1);
                        	for (int i=0;i<lista1.size();i++){
				    			Parametro p = (Parametro) lista1.get(i);
				    			p.setTipo(scopeManager.searchType(tp.toString()));
							}

							ListaObjetos lista2 = new ListaObjetos(listaArg2);
							for (int i=0;i<lista2.size();i++){
								lista1.add(lista2.get(i));
			    			}
							RESULT=lista1;	
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lista_parametros ::= lista_argumentos DOSPUNTOS modo tipos 
            {
              ListaObjetos RESULT =null;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            ListaObjetos lista = new ListaObjetos(listaArg);
                            for (int i=0;i<lista.size();i++){
                                Parametro p = (Parametro) lista.get(i);
                                p.setTipo(scopeManager.searchType(tp.toString()));
                            }
                            
                            
                            RESULT=listaArg;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // decVariable ::= ID COMA decVariable 
            {
              ListaObjetos RESULT =null;
		int idParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token idPar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               // Añadir IDs a lista objetos Parametro
                                ListaObjetos lista = new ListaObjetos(listaArg);
                               Var var= new Var (idPar.getLexema(), 0, idPar.getLine(), idPar.getColumn());
							lista.add(var);
	                        RESULT = lista;
				
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // decVariable ::= ID DOSPUNTOS 
            {
              ListaObjetos RESULT =null;
		int idParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token idPar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				// Añadir ID a lista objetos Variables
				ListaObjetos lista = new ListaObjetos();
				Var var= new Var (idPar.getLexema(), 0, idPar.getLine(), idPar.getColumn());
				lista.add(var);
	                        RESULT = lista;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_argumentos ::= ID 
            {
              ListaObjetos RESULT =null;
		int idParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idParright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token idPar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				// Añadir ID a lista objetos Variables
				ListaObjetos lista = new ListaObjetos();
				Parametro par = new Parametro(idPar.getLexema(), 0, idPar.getLine(), idPar.getColumn(),null);
				lista.add(par);
	                        RESULT = lista;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_argumentos ::= ID COMA lista_argumentos 
            {
              ListaObjetos RESULT =null;
		int idParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token idPar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               // Añadir IDs a lista objetos Parametro
                                ListaObjetos lista = new ListaObjetos(listaArg);
                                Parametro par = new Parametro(idPar.getLexema(), 0, idPar.getLine(), idPar.getColumn(),null);
								lista.add(par);
	                        RESULT = lista;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_argumentos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpo ::= BEGIN NT$7 END ID PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$7 ::= 
            {
              BloqueSentencias RESULT =null;

 	// Desplazamiento principal
	desplScope.put(scopeManager.getCurrentScope().getName(), new Integer(despl));
	BloqueSentencias bloque = new BloqueSentencias();
    IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	cb.addQuadruple ("NOP", null);
	List code=cb.create ();
	bloque.setIntermediateCode (code); 
	RESULT=bloque;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo ::= BEGIN listaSentencias END ID PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    RESULT=bloque;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // modo ::= vacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // modo ::= OUT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tipos ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id.getLexema();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="BOOLEAN"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // vacio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vacio",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipoBooleano ::= FALSE 
            {
              Token RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoBooleano",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipoBooleano ::= TRUE 
            {
              Token RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoBooleano",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= ID PARENTESISIZQ ENTERO PARENTESISDER 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					ScopeIF scope = scopeManager.getCurrentScope();
			        SymbolTableIF tablaSimbolos = scope.getSymbolTable();
                  		TypeTableIF tablaTipos = scope.getTypeTable();
			        if (!(scopeManager.containsSymbol(id.getLexema()))) {
                                    semanticErrorManager.semanticFatalError ("242. La variable: " + id.getLexema() +" en [" + 
									id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                    } else {
                                    SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                                    Expresion exp = new Expresion(simbolo.getType(), id.getLine(), id.getColumn());

                                    // Existe la var y es del tipo vector
                            if (! (simbolo.getType() instanceof TypeArray)) 
                                semanticErrorManager.semanticFatalError ("312. El ID: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es un tipo CONJUNTO.");
                            
                            semanticErrorManager.semanticInfo ("VECTOR--> "+id.getLexema()+" de tipo : "+ simbolo.getType().getName());
                            
                            // Asignacion entre limites
                            TypeArray tipoArray = (TypeArray) simbolo.getType();
                            int n = Integer.parseInt(num.getLexema());
                            if (n < tipoArray.getValIni() || n > tipoArray.getValFin())
                                semanticErrorManager.semanticFatalError ("314. El rango del vector: " + id.getLexema() +" en [" + 
						id.getLine() + ":" + id.getColumn() + "] no esta dentro de los limites del mismo.");

                          	semanticErrorManager.semanticInfo ("El valor '"+ num.getLexema() + "' esta dentro de los limites ["+tipoArray.getValIni()+","+tipoArray.getValFin()+"]");
                           	
                           	// Comprobacion de tipos (vector y expresion)
						if ( !(simbolo.getType().getName().equalsIgnoreCase(exp.getTipo().getName())) ) {	
							TypeIF tipoVar=scopeManager.searchType(simbolo.getType().getName());
                        	if ( !(simbolo.getType().getName().equalsIgnoreCase(tipoVar.getName())))  
                                        semanticErrorManager.semanticFatalError ("308. El ID: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no son compatibles.");
                       }					
                            
	      	            			Value resultado=new Value(Integer.parseInt(num.getLexema()));
                            		
					      			TemporalFactoryIF tF = new TemporalFactory(scope);
                            
					      			IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
					      			//int rDim =tipoArray.getValFin()-tipoArray.getValIni()+1;
					      			
					      			TemporalIF temp = tF.create();
					      			TemporalIF tempI = tF.create();
					      			OperandIF tempE = exp.getResultado();
					      			TemporalIF tempIE = tF.create();
					      		
					      			//cb.addQuadruples (exp.getIntermediateCode());
					      			//cb.addQuadruple ("MVA", temp, id.getLexema());
					      	/*		cb.addQuadruple ("MV", temp, 0);
					      			cb.addQuadruple ("MUL", tempIE, temp ,rDim);
					      			cb.addQuadruple ("ADD", tempIE, tempE);
					      			cb.addQuadruple ("MVP", tempIE, tempIE); *///???
					      			
					      			 Variable var = new Variable(id.getLexema(), scope);
                                     var.setAmbito(tipoArray.getScope());
                                     List code1 = exp.getIntermediateCode();
                                     cb.addQuadruples (code1);
                                     
					      			cb.addQuadruple ("VECTOR",var,num.getLexema());
					      						      			
					      			exp.setResultado(temp);
					      			
					      			exp.setIntermediateCode(cb.create());
							  semanticErrorManager.semanticDebug(exp.getIntermediateCode());
                                RESULT=exp;	
                              }								
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= tipoBooleano 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ScopeIF scope = scopeManager.getCurrentScope();
	      	            	Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
                            // Le damos el valor true=1 y false=0
                            Value resultado=new Value(0);
                            if (id.getLexema().equalsIgnoreCase("TRUE")){
								resultado=new Value(1);
                            }
							exp.setResultado(resultado);
							
                                RESULT=exp;			
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= sentenciaFuncion 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=exp;									
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= ID PUNTO ID PUNTO ID 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= ID PUNTO ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token campo = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			    if ( !(scopeManager.containsSymbol(id.getLexema())) ) {
                                  semanticErrorManager.semanticFatalError ("244. El tipo registro: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                            }
                            ScopeIF scope = scopeManager.getCurrentScope();
                            SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                            TypeRecord tipoRecord = (TypeRecord) scopeManager.searchType(simbolo.getType().getName());

                            // El campo existe en el Registro
                            if (! tipoRecord.containsCampo(campo.getLexema() )) {
                                    semanticErrorManager.semanticFatalError ("246. El campo registro: " + campo.getLexema() +" en [" + 
							campo.getLine() + ":" + campo.getColumn() + "] no ha sido definida.");
                            }                            
                            Expresion exp = new Expresion(tipoRecord.getTypeCampo(campo.getLexema()), campo.getLine(), campo.getColumn());
                            HashMap tablaCampos = tipoRecord.getTablaCampos();
                            SymbolVariable simboloCampo = (SymbolVariable) tablaCampos.get(campo.getLexema()); 


                            Variable var = new Variable(id.getLexema(), scope);
                            var.setAmbito(simbolo.getScope());
                            Variable var2 = new Variable(campo.getLexema(), scope);
                            var2.setDesplCampo(simboloCampo.getDesplazamiento());
                            
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                            TemporalFactoryIF tf = new TemporalFactory(scope);
                            Temporal temporal = (Temporal) tf.create();
                            temporal.setDesplazamiento(despl);
                            despl++;
                            
                            exp.setReferencia(true);
                            exp.setResultado(temporal);
                            
                            cb.addQuadruple ("ACCESO_REGISTRO", temporal, var , var2); 
                            List code=cb.create ();
                            exp.setIntermediateCode (code); 
                            exp.setResultado(temporal);


                            semanticErrorManager.semanticDebug(exp.getIntermediateCode());
						    RESULT = exp;
                		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ScopeIF scope = scopeManager.getCurrentScope();
	      	            	Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), num.getLine(), num.getColumn());
			    			Value resultado=new Value(Integer.parseInt(num.getLexema()));
                            exp.setResultado(resultado);  // Guardamos el valor operador
                
			                //semanticErrorManager.semanticDebug(exp.getIntermediateCode());
						    RESULT = exp;
			                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ScopeIF scope = scopeManager.getCurrentScope();
			        SymbolTableIF tablaSimbolos = scope.getSymbolTable();
                  		TypeTableIF tablaTipos = scope.getTypeTable();
			        if (!(scopeManager.containsSymbol(id.getLexema()))) {
                                    semanticErrorManager.semanticFatalError ("242. La variable: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                    		} else {
                                    SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                                    Expresion exp = new Expresion(simbolo.getType(), id.getLine(), id.getColumn());
                                    if (simbolo instanceof SymbolConstant) {
					SymbolConstant simboloCte = (SymbolConstant) simbolo;
					Value valor=new Value(simboloCte.getValue());
                                        exp.setResultado(valor);
				    }else{
                               			Variable var = new Variable(id.getLexema(), scope);
                                        var.setAmbito(simbolo.getScope());
                                        exp.setReferencia(true);
				        				exp.setResultado(var);       
				       
                                    }
                                //semanticErrorManager.semanticDebug(exp.getIntermediateCode());
                       		    RESULT = exp;
                    		}
                		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= PARENTESISIZQ expresion PARENTESISDER 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					//semanticErrorManager.semanticDebug(exp.getIntermediateCode());
					RESULT=exp; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion DISTINTOQUE expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if ( !(exp1.getTipo() == exp2.getTipo()) )
                                  semanticErrorManager.semanticFatalError ("238. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            if ( (exp1.getTipo() instanceof TypeRecord) || exp1.getTipo() instanceof TypeSet )
                                  semanticErrorManager.semanticFatalError ("240. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no permitida para este tipo.");
                     
                            Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
                            ScopeIF scope = scopeManager.getCurrentScope();
                           
                            TemporalFactoryIF tf = new TemporalFactory(scope);				
                            Temporal temporal = (Temporal) tf.create(); 
                            temporal.setDesplazamiento(despl);
                            despl++;
                            
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                            List code1 = exp1.getIntermediateCode();
                            List code2 = exp2.getIntermediateCode();
                            cb.addQuadruples (code1);
                            cb.addQuadruples (code2);
                            Value verdad = new Value(1);
                            Value falso = new Value(0);
                            LabelFactoryIF lf = CompilerContext.getLabelFactory();					
                            LabelIF LTRUE = lf.create();
                            LabelIF LFIN = lf.create();
                            cb.addQuadruple ("CMP", exp1.getResultado(), exp2.getResultado()); 
                            cb.addQuadruple ("BNZ", LTRUE); 
                            cb.addQuadruple ("MV", temporal, falso);
                            cb.addQuadruple ("BR", LFIN);
                            cb.addQuadruple ("INL", LTRUE);
                            cb.addQuadruple ("MV", temporal, verdad);
                            cb.addQuadruple ("INL", LFIN);

                            List code=cb.create ();
                            exp.setResultado (temporal); 
                            exp.setIntermediateCode (code); 
                            
                            semanticErrorManager.semanticDebug(exp.getIntermediateCode());		
				  			RESULT=exp;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion IGUALQUE expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if ( !(exp1.getTipo() == exp2.getTipo()) )
                                  semanticErrorManager.semanticFatalError ("234. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            if ( (exp1.getTipo() instanceof TypeRecord) || exp1.getTipo() instanceof TypeSet )
                                  semanticErrorManager.semanticFatalError ("236. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no permitida para este tipo.");
                            
                            Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
                            ScopeIF scope = scopeManager.getCurrentScope();
                            TemporalFactoryIF tf = new TemporalFactory(scope);				
                            Temporal temporal = (Temporal) tf.create(); 
                            temporal.setDesplazamiento(despl);
                            despl++;
                            
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                            List code1 = exp1.getIntermediateCode();
                            List code2 = exp2.getIntermediateCode();
                            cb.addQuadruples (code1);
                            cb.addQuadruples (code2);
                            Value verdad = new Value(1);
                            Value falso = new Value(0);
                            LabelFactoryIF lf = CompilerContext.getLabelFactory();					
                            LabelIF LTRUE = lf.create();
                            LabelIF LFIN = lf.create();
                            cb.addQuadruple ("CMP", exp1.getResultado(), exp2.getResultado()); 
                            cb.addQuadruple ("BN", LTRUE); 
                            cb.addQuadruple ("MV", temporal, falso);
                            cb.addQuadruple ("BR", LFIN);
                            cb.addQuadruple ("INL", LTRUE);
                            cb.addQuadruple ("MV", temporal, verdad);
                            cb.addQuadruple ("INL", LFIN);

                            List code=cb.create ();
                            exp.setResultado (temporal); 
                            exp.setIntermediateCode (code); 
                            
                            semanticErrorManager.semanticDebug(exp.getIntermediateCode());		
				  			RESULT=exp;
                  	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion MENORQUE expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			    if ( !(exp1.getTipo() == exp2.getTipo())  ||  !(exp1.getTipo().getName().equals("INTEGER"))  || !(exp2.getTipo().getName().equals("INTEGER")) )  {
                                  semanticErrorManager.semanticFatalError ("232. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
			     }else{
		      	          		  Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
				  				  ScopeIF scope = scopeManager.getCurrentScope();
				 				  TemporalFactoryIF tf = new TemporalFactory(scope);				
                                  Temporal temporal = (Temporal) tf.create(); 
                                  temporal.setDesplazamiento(despl);
								  despl++;
                                  
								  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
								  List code1 = exp1.getIntermediateCode();
								  List code2 = exp2.getIntermediateCode();
								  cb.addQuadruples (code1);
								  cb.addQuadruples (code2);
                                  Value verdad = new Value(1);
                                  Value falso = new Value(0);
        			  			  LabelFactoryIF lf = CompilerContext.getLabelFactory();					
                                  LabelIF LTRUE = lf.create();
        			  			  LabelIF LFIN = lf.create();				
                                  // Hacemos cmp al reves para contemplar caso ambos iguales
                                  cb.addQuadruple ("CMP", exp1.getResultado(), exp2.getResultado()); 
                                  cb.addQuadruple ("BN", LTRUE); 
                                  cb.addQuadruple ("MV", temporal, falso);
                                  cb.addQuadruple ("BR", LFIN);
                                  cb.addQuadruple ("INL", LTRUE);
                                  cb.addQuadruple ("MV", temporal, verdad);
                                  cb.addQuadruple ("INL", LFIN);
                                
								  List code=cb.create ();
								  exp.setResultado (temporal); 
								  exp.setIntermediateCode (code); 
						
					semanticErrorManager.semanticDebug(exp.getIntermediateCode());		
				  	RESULT=exp;
				}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion MAYORQUE expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			    if ( !(exp1.getTipo() == exp2.getTipo())  ||  !(exp1.getTipo().getName().equals("INTEGER"))  || !(exp2.getTipo().getName().equals("INTEGER")) )  {
                                  semanticErrorManager.semanticFatalError ("230. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
			     }else{
			      	          	  Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
					  			  ScopeIF scope = scopeManager.getCurrentScope();
				 				  TemporalFactoryIF tf = new TemporalFactory(scope);				
                                  Temporal temporal = (Temporal) tf.create(); 
                                  temporal.setDesplazamiento(despl);
								  despl++;
                                  
								  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
								  List code1 = exp1.getIntermediateCode();
								  List code2 = exp2.getIntermediateCode();
								  cb.addQuadruples (code1);
								  cb.addQuadruples (code2);
                                  Value verdad = new Value(1);
                                  Value falso = new Value(0);
        			  			  LabelFactoryIF lf = CompilerContext.getLabelFactory();					
                                  LabelIF LTRUE = lf.create();
        			  				LabelIF LFIN = lf.create();				
                                  // Hacemos cmp al reves para contemplar caso ambos iguales
                                  cb.addQuadruple ("CMP", exp2.getResultado(), exp1.getResultado()); 
                                  cb.addQuadruple ("BN", LTRUE); 
                                  cb.addQuadruple ("MV", temporal, falso);
                                  cb.addQuadruple ("BR", LFIN);
                                  cb.addQuadruple ("INL", LTRUE);
                                  cb.addQuadruple ("MV", temporal, verdad);
                                  cb.addQuadruple ("INL", LFIN);
                                
				  List code=cb.create ();
				  exp.setResultado (temporal); 
				  exp.setIntermediateCode (code); 
				  
				  semanticErrorManager.semanticDebug(exp.getIntermediateCode());		
				  RESULT=exp;
				}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if ( !(exp1.getTipo() == exp2.getTipo()) || !(exp1.getTipo().getName().equals("BOOLEAN")) || !(exp2.getTipo().getName().equals("BOOLEAN")) ) {
                                semanticErrorManager.semanticFatalError ("228. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            }else{
				      	        Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
								ScopeIF scope = scopeManager.getCurrentScope();
								TemporalFactoryIF tf = new TemporalFactory(scope);				
		                        Temporal temporal = (Temporal) tf.create(); 
                                temporal.setDesplazamiento(despl);
								despl++;
			
								IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
								List code1 = exp1.getIntermediateCode();
								List code2 = exp2.getIntermediateCode();
								cb.addQuadruples (code1);
								cb.addQuadruples (code2);

                                Value verdad = new Value(1);
                                Value falso = new Value(0);
        						LabelFactoryIF lf = CompilerContext.getLabelFactory();					
                                LabelIF LTRUE_1 = lf.create();
                                LabelIF LTRUE_2 = lf.create();
        						LabelIF LFIN = lf.create();				

                                cb.addQuadruple ("CMP", verdad, exp1.getResultado()); 
                                cb.addQuadruple ("BZ", LTRUE_1); 
                                cb.addQuadruple ("MV", temporal, falso);
                                cb.addQuadruple ("BR", LFIN); 
                                cb.addQuadruple ("INL", LTRUE_1);
                                cb.addQuadruple ("CMP", verdad, exp2.getResultado()); 
                                cb.addQuadruple ("BZ", LTRUE_2); 
                                cb.addQuadruple ("MV", temporal, falso);
                                cb.addQuadruple ("BR", LFIN); 
                                cb.addQuadruple ("INL", LTRUE_2);
                                cb.addQuadruple ("MV", temporal, verdad);
                                cb.addQuadruple ("INL", LFIN);
                                
				List code=cb.create ();
				exp.setResultado (temporal); 
				exp.setIntermediateCode (code); 
        		
					semanticErrorManager.semanticDebug(exp.getIntermediateCode());		
                    RESULT=exp;
                            }
        		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if ( !(exp1.getTipo() == exp2.getTipo()) || !(exp1.getTipo().getName().equals("BOOLEAN")) || !(exp2.getTipo().getName().equals("BOOLEAN")) ) {
                                semanticErrorManager.semanticFatalError ("La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            }else{
		      	        		Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
								ScopeIF scope = scopeManager.getCurrentScope();
				
                                TemporalFactoryIF tf = new TemporalFactory(scope);;				
                                Temporal temporal = (Temporal) tf.create(); 
                               	temporal.setDesplazamiento(despl);
								despl++;
			
								IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
								List code1 = exp1.getIntermediateCode();
								List code2 = exp2.getIntermediateCode();
								cb.addQuadruples (code1);
								cb.addQuadruples (code2);

                                Value verdad = new Value(1);
                                Value falso = new Value(0);
        						LabelFactoryIF lf = CompilerContext.getLabelFactory();					
                                LabelIF LTRUE = lf.create();
        						LabelIF LFIN = lf.create();				

                                cb.addQuadruple ("CMP", verdad, exp1.getResultado()); 
                                cb.addQuadruple ("BZ", LTRUE); 
                                cb.addQuadruple ("CMP", verdad, exp2.getResultado()); 
                                cb.addQuadruple ("BZ", LTRUE); 
                                cb.addQuadruple ("MV", temporal, falso);
                                cb.addQuadruple ("BR", LFIN); 
                                cb.addQuadruple ("INL", LTRUE);
                                cb.addQuadruple ("MV", temporal, verdad);
                                cb.addQuadruple ("INL", LFIN);
                                
								List code=cb.create ();
								exp.setResultado (temporal); 
								exp.setIntermediateCode (code); 
        			
              
					semanticErrorManager.semanticDebug(exp.getIntermediateCode());		
                    RESULT=exp;
                            }
        		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					semanticErrorManager.semanticInfo("OPERACION SUMA");	
                            ScopeIF scope = scopeManager.getCurrentScope();
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                            Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());
                            TemporalFactoryIF tf = new TemporalFactory(scope);				
                            Temporal temporal = (Temporal) tf.create(); 
                            
						 // Suma CONJUNTOS
                     /*       if (exp1.getTipo().equals(exp2.getTipo()) && exp1.getTipo() instanceof TypeSet) {
                                TypeSet tipoSet = (TypeSet) exp1.getTipo();
                                exp.setTipo(exp1.getTipo());
                                temporal.setDesplazamiento(despl);
                                temporal.setSize(tipoSet.getTamanyo());
                                despl=despl+tipoSet.getTamanyo();
                                List code1 = exp1.getIntermediateCode();
                                List code2 = exp2.getIntermediateCode();
                                cb.addQuadruples (code1);
                                cb.addQuadruples (code2);
                                cb.addQuadruple ("UNION_SET", temporal, exp1.getResultado(), exp2.getResultado()); 
                                
                                
                            // Suma ENTEROS y/o PUNTEROS  
                            } else {
                                if (exp.castingTipos(exp1 , exp2) )
                                     semanticErrorManager.semanticFatalError ("La expresion: " + id.getLexema() +" en [" + 
                                        id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                                  
                            }*/
                            temporal.setDesplazamiento(despl);
                            despl++;
                            List code1 = exp1.getIntermediateCode();
                            List code2 = exp2.getIntermediateCode();
                            cb.addQuadruples (code1);
                            cb.addQuadruples (code2);
                            cb.addQuadruple ("ADD", temporal, exp1.getResultado(), exp2.getResultado()); // temporal <-exp1 + exp2
				
							List code=cb.create ();
                            exp.setResultado (temporal); 
                            exp.setIntermediateCode (code); 
                           
                           	semanticErrorManager.semanticDebug(exp.getIntermediateCode());		
                            RESULT=exp;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						    Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());
                            if (exp.castingTipos(exp1 , exp2) ) {
                                 semanticErrorManager.semanticFatalError ("La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            }else{
                            	ScopeIF scope = scopeManager.getCurrentScope();
                            	TemporalFactoryIF tf = new TemporalFactory(scope);				
								Temporal temporal = (Temporal) tf.create(); 
								temporal.setDesplazamiento(despl);
								despl++;        
								IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
								List code1 = exp1.getIntermediateCode();
								List code2 = exp2.getIntermediateCode();
								cb.addQuadruples (code1);
								cb.addQuadruples (code2);
							
								cb.addQuadruple ("SUB", temporal, exp1.getResultado(), exp2.getResultado()); // temporal <- exp1 - exp2
								List code=cb.create ();
								exp.setResultado(temporal);  
								exp.setIntermediateCode(code); 
								
                                semanticErrorManager.semanticDebug(exp.getIntermediateCode());		
								RESULT=exp;
                             }

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciaProcedimiento ::= ID PARENTESISIZQ lista_parametros_llamada PARENTESISDER PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token idProc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaObjetos listaPar = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						
						 semanticErrorManager.semanticInfo("Sentencia PROCEDIMIENTO "+idProc.getLexema()+" en la linea: "+idProc.getLine());
						
                            ScopeIF scope = scopeManager.getCurrentScope();
	         	    		SymbolTableIF tablaSimbolos = scope.getSymbolTable();
	                    	TypeTableIF tablaTipos = scope.getTypeTable();
				
                            // Si Procedimiento ha sido declarado
		      	    		if (!(scopeManager.containsSymbol(idProc.getLexema()))) 
                                semanticErrorManager.semanticFatalError("332. El procedimiento "+idProc.getLexema()+" en la linea: "+idProc.getLine()+" NO ha sido declarada");

                            // Si es un tipo Procedure    
                            SymbolIF proc = scopeManager.searchSymbol(idProc.getLexema());
                            TypeIF tipo = scopeManager.searchType(idProc.getLexema());
                            if (! (tipo instanceof TypeProcedure) )
                                        semanticErrorManager.semanticFatalError("334. El ID "+idProc.getLexema()+" en la linea: "+idProc.getLine()+" NO es un PROCEDIMIENTO");
	            
                            // num de parametros sea el mismo que argumentos y sea correcto por REF/VALOR
	            	    	TypeProcedure tipoProc = (TypeProcedure) proc.getType();
                            ListaObjetos lista = new ListaObjetos(listaPar);

                            // Coincidencia de Tipos y numero entre la Def del procedimiento y la llamada
                            if (!tipoProc.comparaParametros(listaPar)) 
                                semanticErrorManager.semanticFatalError ("336. El num. de parametros no coincide en para el procedimiento " + idProc.getLexema() + " [" + idProc.getLine() + ":" + idProc.getColumn() + "]");
            		    
                            BloqueSentencias bloque = new BloqueSentencias();
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                            // Obtener desplazamiento Procedimiento
                            int desplProc=((Integer)desplScope.get(idProc.getLexema())).intValue();
                            Value valor = new Value(desplProc);
                            List lista1 = tipoProc.getListaParametros();

                            cb.addQuadruple("INICIO_ARGUMENTOS", null, null, null);

                            for (int i=listaPar.size()-1;i>=0; i--) {
                                SymbolVariable s = (SymbolVariable) lista1.get(listaPar.size()-i-1);
                                int d = s.getDesplazamiento();
                                Expresion expPar = (Expresion) listaPar.get(i);
                                cb.addQuadruples(expPar.getIntermediateCode());
                                if ( s.getReferencia() ) {
                                    if ( !expPar.getReferencia())
                                        semanticErrorManager.semanticFatalError ("338. El parametro es por referencia y no admite expresiones." + idProc.getLexema() + " [" + idProc.getLine() + ":" + idProc.getColumn() + "]");
                                    cb.addQuadruple("ARGUMENTO_REF", expPar.getResultado(), new Value(d));
                                 }else{
                                    cb.addQuadruple("ARGUMENTO", expPar.getResultado(), new Value(d));
                                 }
                            }
                            Variable var = new Variable(idProc.getLexema());
                            LabelFactoryIF lf = CompilerContext.getLabelFactory();
                            LabelIF label = lf.create();
                            var.setEtiqRetorno(label);
                            var.setEtiqSub(tipoProc.getEtiqSub());

                            // No hay retorno, se pasa valor cero en operando2
                            cb.addQuadruple ("CALL", var, new Value(tipoProc.getScope().getLevel()), new Value(0));
                            bloque.setIntermediateCode(cb.create());
                            
                              semanticErrorManager.semanticDebug(bloque.getIntermediateCode());	
                              RESULT=bloque;	
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaProcedimiento",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_parametros_llamada ::= expresion COMA lista_parametros_llamada 
            {
              ListaObjetos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaParright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaObjetos listaPar = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ListaObjetos lista = new ListaObjetos(listaPar);
                            lista.add(exp);
                            RESULT=lista;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_parametros_llamada ::= expresion 
            {
              ListaObjetos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ListaObjetos lista = new ListaObjetos();
			    lista.add(exp);
                RESULT=lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaFuncion ::= ID PARENTESISIZQ lista_parametros_llamada PARENTESISDER 
            {
              Expresion RESULT =null;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listaParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaObjetos listaPar = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					semanticErrorManager.semanticInfo("Sentencia FUNCION en la linea: "+idFunc.getLine()+ " y columna "+idFunc.getColumn());
	                    
 					ScopeIF scope = scopeManager.getCurrentScope();
            		    SymbolTableIF tablaSimbolos = scope.getSymbolTable();
                            TypeTableIF tablaTipos = scope.getTypeTable();
			    
                            // Si la funcion ha sido declarada
		      	    if (!(scopeManager.containsSymbol(idFunc.getLexema()))) 
                                semanticErrorManager.semanticFatalError("340. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" NO ha sido declarada");
	                    
                            // Si es un tipo Funcion
                            SymbolIF func = scopeManager.searchSymbol(idFunc.getLexema());
                            if (! (func.getType() instanceof TypeFunction) )
				    semanticErrorManager.semanticFatalError("342. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" NO es un FUNCTION");
	            	        
            		    // num de parametros sea el mismo que argumentos y sea correcto por REF/Valor
	            	    TypeFunction tipoFunc = (TypeFunction) func.getType();
                            ListaObjetos lista = new ListaObjetos(listaPar);

                            // Coincidencia de Tipos y numero entre la Def de la funcion y la llamada
		  	    		if (!tipoFunc.comparaParametros(listaPar)) 
                                  semanticErrorManager.semanticFatalError ("344. El num. de parametros no coincide en tipos o numero para la funci�n " + idFunc.getLexema() + " [" + idFunc.getLine() + ":" + idFunc.getColumn() + "]");
            		    
                            Expresion exp = new Expresion(tipoFunc.getTipoRetorno(), idFunc.getLine(), idFunc.getColumn());
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
                            
                            // Temporal para el retorno
                            TemporalFactoryIF tf = new TemporalFactory(scope);				
                            Temporal temporal = (Temporal) tf.create(); // Temporal donde se almacenara retorno
                            temporal.setDesplazamiento(despl);
                            despl++;
                            exp.setResultado(temporal);
                            
                            // Obtener desplazamiento Funci�n
                            int desplFunc=((Integer)desplScope.get(idFunc.getLexema())).intValue();
                            Value valor = new Value(desplFunc);
                            List lista1 = tipoFunc.getListaParametros();
                                     
                            cb.addQuadruple("INICIO_ARGUMENTOS", null, null, null);
					
			    for (int i=listaPar.size()-1;i>=0; i--){
                                SymbolVariable s = (SymbolVariable) lista1.get(listaPar.size()-i-1);
                                int d = s.getDesplazamiento();
                                Expresion expPar = (Expresion) listaPar.get(i);
                                cb.addQuadruples(expPar.getIntermediateCode());
                                if ( s.getReferencia() ) {
                                    if ( !expPar.getReferencia())
                                        semanticErrorManager.semanticFatalError ("346. El par�metro es por referencia y no admite expresiones." + idFunc.getLexema() + " [" + idFunc.getLine() + ":" + idFunc.getColumn() + "]");
                                    cb.addQuadruple("ARGUMENTO_REF", expPar.getResultado(), new Value(d));
                                 }else{
                                    cb.addQuadruple("ARGUMENTO", expPar.getResultado(), new Value(d));
                                 }
                            }
                            Variable var = new Variable(idFunc.getLexema());
                            LabelFactoryIF lf = CompilerContext.getLabelFactory();
                            LabelIF label = lf.create();
                            var.setEtiqRetorno(label);
                            var.setEtiqSub(tipoFunc.getEtiqSub());
                            cb.addQuadruple ("CALL", var, new Value(tipoFunc.getScope().getLevel()), temporal);
                            exp.setIntermediateCode(cb.create());
                            
                            semanticErrorManager.semanticDebug(exp.getIntermediateCode());		
                            RESULT=exp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciaAsignacion ::= ID PARENTESISIZQ ENTERO PARENTESISDER ASIGNACION expresion PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							semanticErrorManager.semanticInfo ("Sentencia ASIGNACION " + id.getLexema() + ":= " + exp.getTipo().getName()+" en [" +id.getLine() + ":" + id.getColumn()+"]");
			
                            ScopeIF scope = scopeManager.getCurrentScope();
                            BloqueSentencias bloque = new BloqueSentencias();
                            // Existe la variable vector
                            if (!(scopeManager.containsSymbol(id.getLexema())) ) 
                                semanticErrorManager.semanticFatalError ("310. El VECTOR: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no ha sido definido.");
                            
                            SymbolVariable simbolo = (SymbolVariable) scopeManager.searchSymbol(id.getLexema());
                            
                            // Existe la var y es del tipo vector
                            if (! (simbolo.getType() instanceof TypeArray)) 
                                semanticErrorManager.semanticFatalError ("312. El ID: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es un tipo CONJUNTO.");
                            
                            semanticErrorManager.semanticInfo ("VECTOR--> "+id.getLexema()+" de tipo : "+ simbolo.getType().getName());
                            
                            // Asignacion entre limites
                            TypeArray tipoArray = (TypeArray) simbolo.getType();
                            int n = Integer.parseInt(num.getLexema());
                            if (n < tipoArray.getValIni() || n > tipoArray.getValFin())
                                semanticErrorManager.semanticFatalError ("314. El rango del vector: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no esta dentro de los limites del mismo.");

                          	semanticErrorManager.semanticInfo ("El valor '"+ num.getLexema() + "' esta dentro de los limites ["+tipoArray.getValIni()+","+tipoArray.getValFin()+"]");
                           	
                           	// Comprobacion de tipos (vector y expresion)
							if ( !(simbolo.getType().getName().equalsIgnoreCase(exp.getTipo().getName())) ) {	
								TypeIF tipoVar=scopeManager.searchType(simbolo.getType().getName());
 
                        		if (!(simbolo.getType().getName().equalsIgnoreCase(tipoVar.getName()))) { 
                        			semanticErrorManager.semanticFatalError ("308. El ID: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no son compatibles.");
                           		}else{	
                           			
					      			/*TemporalFactory tF = new TemporalFactory(scope);
					      			IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
					      			int rDim = tipoArray.getValIni()-tipoArray.getValFin()+1;
					      			TemporalIF temp = tF.create();
					      			TemporalIF tempI = tF.create();
					      			OperandIF tempE = exp.getResultado();
					      			TemporalIF tempIE = tF.create();
					      		
					      			cb.addQuadruples (exp.getIntermediateCode());
					      			//cb.addQuadruple ("MVA", temp, id.getLexema());
					      			cb.addQuadruple ("MV", temp, 0);
					      			cb.addQuadruple ("MUL", tempIE, temp ,rDim);
					      			cb.addQuadruple ("ADD", tempIE, tempE);
					      			cb.addQuadruple ("MVP", tempIE, tempIE); //???
					      			
					      			bloque.setResultado(temp);
					      			bloque.setResultadoIndex(tempI);
					      			bloque.setIntermediateCode(cb.create());*/
                          		}
                            }
                            
                              semanticErrorManager.semanticDebug(bloque.getIntermediateCode());					
                            RESULT = bloque;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentenciaAsignacion ::= ID PUNTO ID PUNTO ID ASIGNACION expresion PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaAsignacion ::= ID PUNTO ID ASIGNACION expresion PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token campo = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

					semanticErrorManager.semanticInfo ("Sentencia ASIGNACION " + id.getLexema() + ":= " + exp.getTipo().getName()+" en [" +id.getLine() + ":" + id.getColumn()+"]");
			
                            if ( !(scopeManager.containsSymbol(id.getLexema())) ) {
                                semanticErrorManager.semanticFatalError ("286. La variable: " + id.getLexema() +" en [" + 
								id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                            } else {
	                        SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                                TypeIF tipo = scopeManager.searchType(simbolo.getType().getName());

				if ( !(tipo instanceof TypeRecord) ) 
					semanticErrorManager.semanticFatalError ("290. La variable: " + id.getLexema() +" en [" + 
								id.getLine() + ":" + id.getColumn() + "] no es un tipo RECORD.");
				TypeRecord tipoRec = (TypeRecord) scopeManager.searchType(simbolo.getType().getName());
				if ( tipoRec.getTypeCampo(campo.getLexema()) == null ) 
                              		semanticErrorManager.semanticFatalError ("292. El campo del REG: " + campo.getLexema() +" en [" + 
							campo.getLine() + ":" + campo.getColumn() + "] no ha sido definido.");
                                
                                // Si no son mismo tipo. ID.campo debe ser expresion ENTERA
                                if ( !(tipoRec.getTypeCampo(campo.getLexema()).getName().equals(exp.getTipo().getName())) ){ 
                                    if ( (tipoRec.getTypeCampo(campo.getLexema()).getName().equals("INTEGER")&& exp.getTipo().getName().equals("POINTER")) ){
    			            }else{
                                         semanticErrorManager.semanticFatalError ("294. La Asignacion: " + id.getLexema() +" en [" + 
                                               	id.getLine() + ":" + id.getColumn() + "] no coincide en tipos.");
                                        }                
                                    }
					
                                    ScopeIF scope = scopeManager.getCurrentScope();
                                   
                                    BloqueSentencias bloque = new BloqueSentencias();
                                   			
                                    //semanticErrorManager.semanticDebug(bloque.getIntermediateCode());	
                                    RESULT=bloque;
							 							
                    		}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaAsignacion ::= ID ASIGNACION expresion PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							//semanticErrorManager.semanticInfo ("Sentencia ASIGNACION " + id.getLexema() + ":= " + exp.getTipo().getName()+" en [" +id.getLine() + ":" + id.getColumn()+"]");
							BloqueSentencias bloque = new BloqueSentencias();
                            ScopeIF scope = scopeManager.getCurrentScope();
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                            
                            // Hay que tener en cuenta que puede ser el ID de una funcion
                            if (!(scopeManager.containsSymbol(id.getLexema()))) {
                                semanticErrorManager.semanticFatalError ("274. La variable: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                            } else {
								SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                                //TypeIF tipo = simbolo.getType();

									// Comprobamos que no es una constante
									if (simbolo instanceof SymbolConstant)
                                    semanticErrorManager.semanticFatalError ("276. La constante: " + id.getLexema() +" en [" + 
                                    id.getLine() + ":" + id.getColumn() + "] no admite asignaciones.");
                                    
                                  	TypeIF tipo = exp.getTipo();
                                  
                                	//semanticErrorManager.semanticInfo ("Sentencia asignacion. Tipo de la EXPRESION: "+tipo.getName()+ " en [" + id.getLine() + ":" + id.getColumn() + "]");
			            
	                                // Comprobaciones en el caso de una funcion	
	                                if (tipo instanceof TypeFunction ) {

                                    TypeFunction tipoFuncion = (TypeFunction) tipo;
                                    // El tipo de retorno debe ser igual que la expresion
                                     
                                    if ( !(tipoFuncion.getTipoRetorno() == exp.getTipo()) ) 
                                        semanticErrorManager.semanticFatalError ("278. El tipo retorno funcion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no coincide con la expresion.");
                                     // Es una funcion y si hay asignacion de retorno
                                     tipoFuncion.setHayRetorno(true);
                                     
                                     Variable var = new Variable(id.getLexema(), scope);
                                     var.setAmbito(tipo.getScope());
                                     LabelIF label = tipoFuncion.getEtiqSubFin();
                                     var.setEtiqRetorno(label);
                                     List code1 = exp.getIntermediateCode();
                                     cb.addQuadruples (code1);
                                
                                     cb.addQuadruple("RET", var, exp.getResultado());
                                     
                                    
                                } /*else {
                                    // SOY UNA ASIGNACION CONJUNTOS

                                    if (tipo instanceof TypeSet) {
 
                                        if ( !(tipo.getName() == exp.getTipo().getName()) ) 
                                            semanticErrorManager.semanticFatalError ("280. La expresion no se puede asignar a un Tipo CONJUNTO: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "]");
                                        
                                         

                                    }else {
                                        // No se permiten asignaciones tipo record
                                        if (tipo instanceof TypeRecord)
                                            semanticErrorManager.semanticFatalError ("282. No se permiten asignaciones tipo record: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "]");
                                    
                                        // Si no son mismo tipo. ID debe ser expresion ENTERA
                                        if ( !(tipo.getName() == exp.getTipo().getName()) ){ 
                                            if ( (tipo.getName().equals("INTEGER")&& exp.getTipo().getName().equals("POINTER")) ){
                                            
                                            }else{
                                                semanticErrorManager.semanticFatalError ("284. La Asignacion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no coincide en tipos.");
                                            }                
                                     }


                                   
                                  }    
                                }   */
                                
                                 
                           			// Creamos codigo para la sentencia 
                                    Variable var = new Variable(id.getLexema(), scope);
                                    var.setAmbito(simbolo.getScope());
                                    List code1 = exp.getIntermediateCode();
                                    cb.addQuadruples (code1);
                                    cb.addQuadruple("MV", var, exp.getResultado()); 
                                
                               	List code = cb.create();
                                bloque.setIntermediateCode(code);
                                
                               	semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
                                RESULT=bloque;
					
                             }
                		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaIf ::= IF expresion THEN listaSentencias ELSE listaSentencias END IF PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sent1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sent1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		BloqueSentencias sent1 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sent2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sent2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueSentencias sent2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			//semanticErrorManager.semanticInfo ("Sentencia IF con ELSE en [" +id.getLine() + ":" + id.getColumn()+"]");
                               
                            if ( !(exp.getTipo().getName().equals("BOOLEAN")) ) 
                                semanticErrorManager.semanticFatalError ("330. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es LOGICA.");
                                BloqueSentencias bloque = new BloqueSentencias();
								ScopeIF scope = scopeManager.getCurrentScope();
								IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
				
								LabelFactoryIF lf = CompilerContext.getLabelFactory();
								LabelIF LTRUE = lf.create();
								LabelIF LFALSE = lf.create();
								
                                cb.addQuadruples(exp.getIntermediateCode());
                                cb.addQuadruple("CMP", exp.getResultado(), new Value(1));
								cb.addQuadruple("BNZ",LFALSE);   // Salto no cero
								cb.addQuadruples(sent1.getIntermediateCode());
								cb.addQuadruple("BR",LTRUE);  // Salto incondicional
								cb.addQuadruple("INL", LFALSE);
								cb.addQuadruples(sent2.getIntermediateCode());
								cb.addQuadruple("INL", LTRUE);
                                cb.addQuadruple("NOP", null);
                                List code = cb.create();
                                bloque.setIntermediateCode(code);

							 semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
                                RESULT=bloque;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaIf ::= IF expresion THEN listaSentencias END IF PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
					//semanticErrorManager.semanticInfo ("Sentencia IF simple en [" +id.getLine() + ":" + id.getColumn()+"]");
                            if ( !(exp.getTipo().getName().equals("BOOLEAN")) ) 
                                  semanticErrorManager.semanticFatalError ("328. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es LOGICA.");
                                  BloqueSentencias bloque = new BloqueSentencias();
				  				  ScopeIF scope = scopeManager.getCurrentScope();
				  				  
				  				  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);

                                  LabelFactoryIF lf = CompilerContext.getLabelFactory();
                                  LabelIF LFALSE = lf.create();

                                  cb.addQuadruples(exp.getIntermediateCode());
                                  cb.addQuadruple("CMP", exp.getResultado(), new Value(1));
	    			  			  cb.addQuadruple("BNZ",LFALSE);   // Salto negativo
					 			  cb.addQuadruples(sent.getIntermediateCode());
								  cb.addQuadruple("INL", LFALSE);
                                  cb.addQuadruple ("NOP", null);
                                  List code = cb.create();
                                  bloque.setIntermediateCode(code);
                                  
                                  semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
                                  RESULT=bloque;

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaWhile ::= WHILE expresion LOOP listaSentencias END LOOP PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

		semanticErrorManager.semanticInfo("Sentencia WHILE en [" + id.getLine() + ":" + id.getColumn() + "]");
                              if ( !(exp.getTipo().getName().equals("BOOLEAN")) )
                                    semanticErrorManager.semanticFatalError ("326. La expresion sentencia WHILE no es BOOLEANA.");
                              BloqueSentencias bloque = new BloqueSentencias();
                              ScopeIF scope = scopeManager.getCurrentScope();
								
							  IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                              TemporalFactoryIF tf = new TemporalFactory(scope);				
                              Temporal temporal = (Temporal) tf.create(); 
                              temporal.setDesplazamiento(despl);
                              despl++;
                                    
                              LabelFactoryIF lf = CompilerContext.getLabelFactory();					
                              LabelIF INICIO_BUCLE = lf.create();
                              LabelIF FIN_BUCLE= lf.create();				
                        	
                              bloque.setResultado(temporal);
                              
                              semanticErrorManager.semanticDebug("exp: "+exp.getIntermediateCode());
                              
                              
                              cb.addQuadruple("INL", INICIO_BUCLE);
                              cb.addQuadruples(exp.getIntermediateCode());
                              cb.addQuadruple("CMP", exp.getResultado(), new Value(0));
                              cb.addQuadruple("BZ", FIN_BUCLE);
                              cb.addQuadruples(sent.getIntermediateCode()); 
                              cb.addQuadruple("BP", INICIO_BUCLE);           // Salto si NO negativo
                              cb.addQuadruple("INL", FIN_BUCLE);
                              
                              
                              
    		
                              List code = cb.create();
                              bloque.setIntermediateCode(code);
                             
                              semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
                              RESULT=bloque;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentenciaPutLine ::= PUTLINE PARENTESISIZQ expresion PARENTESISDER PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    
            BloqueSentencias bloque = new BloqueSentencias();
            ScopeIF scope = scopeManager.getCurrentScope();
            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
			cb.addQuadruples(exp.getIntermediateCode());
			
            if (exp.getTipo() instanceof TypeBoolean){ //Es un boolean
            	
		        if (exp.getResultado().toString().equals("0")){
		        	cadenas.add("\""+new Value(false).toString()+"\"");
		        	cb.addQuadruple("WRSTR","cadena"+cadenas.size());
		        }else if (exp.getResultado().toString().equals("1")){
		        	cadenas.add("\""+new Value(true).toString()+"\"");
		        	cb.addQuadruple("WRSTR","cadena"+cadenas.size());
		        }else{
		        	LabelFactoryIF lF = new LabelFactory ();
			        LabelIF l1 = lF.create ();
			        LabelIF l2 = lF.create ();
			       
			        
			        cb.addQuadruple("CMP", exp.getResultado(), new Value(0)); //comparo si es falso
                    cb.addQuadruple("BNZ", l1);             // Salto si x!=0 --> Si no es falso
                    cb.addQuadruple ("INL", l2);
                    cadenas.add("\""+new Value(false).toString()+"\"");
		        	cb.addQuadruple("WRSTR","cadena"+cadenas.size());
		        	etiqueta.add(etiqueta.size()+1);
		        	cb.addQuadruple("BR", "etiqueta"+etiqueta.size());             // Salto incondicional
                    cb.addQuadruple("BZ", l2);             // Salto si x!=0 --> Si no es falso
                    cb.addQuadruple ("INL", l1);
                    cadenas.add("\""+new Value(true).toString()+"\"");
		        	cb.addQuadruple("WRSTR","cadena"+cadenas.size());
		        	cb.addQuadruple ("INL",  "etiqueta"+etiqueta.size());
			       
		        }
		        
		    }else if (exp.getTipo() instanceof TypeArray){ //Es un Array
		    	TypeArray array = (TypeArray) exp.getTipo();
		    	if (array.getTipo() instanceof TypeBoolean){ //Es un array de tipo boolean
		    		//semanticErrorManager.semanticDebug("ARRAY de tipo BOOLEAN");
		    		
		    		LabelFactoryIF lF = new LabelFactory ();
			        LabelIF l1 = lF.create ();
			        LabelIF l2 = lF.create ();
			        cb.addQuadruple("CMP", exp.getResultado(), new Value(0)); //comparo si es falso
                    cb.addQuadruple("BNZ", l1);             // Salto si x!=0 --> Si no es falso
                    cb.addQuadruple ("INL", l2);
                    cadenas.add("\""+new Value(false).toString()+"\"");
		        	cb.addQuadruple("WRSTR","cadena"+cadenas.size());
		        	etiqueta.add(etiqueta.size()+1);
		        	cb.addQuadruple("BR", "etiqueta"+etiqueta.size());             // Salto incondicional
                    cb.addQuadruple("BZ", l2);             // Salto si x!=0 --> Si no es falso
                    cb.addQuadruple ("INL", l1);
                    cadenas.add("\""+new Value(true).toString()+"\"");
		        	cb.addQuadruple("WRSTR","cadena"+cadenas.size());
		        	cb.addQuadruple ("INL",  "etiqueta"+etiqueta.size());
		    	
		    	}else{ //Es un array de tipo Integer
		    		//semanticErrorManager.semanticDebug("ARRAY de tipo INTEGER");
		    		      			
		    		cb.addQuadruple("WRINT", exp.getResultado());
		    	}
            }else{//Es un numero
            	cb.addQuadruple("WRINT", exp.getResultado());
            }
            
			List code = cb.create();
            bloque.setIntermediateCode(cb.create());
            
            semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
			RESULT=bloque;
	   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaPutLine",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentenciaPutLine ::= PUTLINE PARENTESISIZQ CARACTERESCADENA PARENTESISDER PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token cad = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
     			//semanticErrorManager.semanticInfo ("La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] es una CADENA DE CARACTERES.");
       			
       			BloqueSentencias bloque = new BloqueSentencias();
     			ScopeIF scope = scopeManager.getCurrentScope();
				IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
				cadenas.add(cad.getLexema());
				cb.addQuadruple("WRSTR","cadena"+cadenas.size());
				List code = cb.create();
                bloque.setIntermediateCode(cb.create());
                
                semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
					RESULT=bloque;		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaPutLine",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= RETURN expresion 
            {
              BloqueSentencias RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				BloqueSentencias bloque = new BloqueSentencias(exp);
				ScopeIF scope = scopeManager.getCurrentScope();
				IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);	
				List code1 = exp.getIntermediateCode();
				cb.addQuadruples (code1);
				cb.addQuadruple("RET",exp.getResultado());
				List code = cb.create();
                bloque.setIntermediateCode(code);
                
                semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
					RESULT=bloque;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= sentenciaProcedimiento 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= sentenciaPutLine 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= sentenciaWhile 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= sentenciaIf 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= sentenciaAsignacion 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listaSentencias ::= sentencia listaSentencias 
            {
              BloqueSentencias RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueSentencias sent = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias blq = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					BloqueSentencias bloque = new BloqueSentencias();
                    IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder (scopeManager.getCurrentScope());
                    cb.addQuadruples(sent.getIntermediateCode());
                	cb.addQuadruples(blq.getIntermediateCode());
                	List code = cb.create();
                	bloque.setIntermediateCode(code);
					
                	 //semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
					RESULT=bloque;

				    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listaSentencias ::= sentencia 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // procedimiento ::= PROCEDURE ID PARENTESISIZQ lista_parametros PARENTESISDER IS NT$6 cuerpo 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token idProc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                ScopeIF scope = scopeManager.getCurrentScope();
                                BloqueSentencias bloque = new BloqueSentencias();
                                IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
								List code2 = bloque2.getIntermediateCode();
                                TypeProcedure tipoProc = (TypeProcedure) scopeManager.searchType(scope.getName());
                                cb.addQuadruple("INICIO_SUBPROG", tipoProc.getEtiqSub().getName());
								
								 semanticErrorManager.semanticDebug("***CODE2: " +code2);
								
								cb.addQuadruples (code2);
                                cb.addQuadruple("FIN_SUBPROG", tipoProc.getEtiqSub().getName(), tipoProc.getEtiqSubFin().getName(),new Value(tipoProc.getScope().getLevel()));
								List code=cb.create ();
								bloque.setIntermediateCode (code); 

                                // Cerramos Scope
                                desplScope.put(scope.getName(), new Integer(despl));
                                scopeManager.closeScope();

                                despl=((Integer)desplScope.get(scopeManager.getCurrentScope().getName())).intValue();
                                
                                semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
                                RESULT=bloque;
              

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$6 ::= 
            {
              BloqueSentencias RESULT =null;
		int idProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token idProc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

				semanticErrorManager.semanticInfo("PROCEDIMIENTO: "+idProc.getLexema()+" en la linea: "+idProc.getLine());
 				
 				// el procedimiento ha sido declarado
                            if (scopeManager.containsSymbol(idProc.getLexema())) {
				semanticErrorManager.semanticFatalError("350. El procediiento "+idProc.getLexema()+" en la linea: "+idProc.getLine()+" ya ha sido declarado");
                            }else{ 
                                
				// Crear FUNCION en ambito
				ScopeIF scope = scopeManager.getCurrentScope();
                TypeTableIF tablaTipos = scope.getTypeTable();
	  			SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							
                // a�adir funcion a TT
                TypeProcedure tipoProcedimiento = new TypeProcedure(scope, idProc.getLexema());
				tablaTipos.addType(idProc.getLexema(), tipoProcedimiento);
							
				// a�adir funcion a TS
                 SymbolProcedure simboloProc = new SymbolProcedure(scope,idProc.getLexema(),tablaTipos.getType(idProc.getLexema()));
				tablaSimbolos.addSymbol(idProc.getLexema(), simboloProc);
							
				// NUEVO ambito para funcion y tabla TS y TT
				scopeManager.openScope(idProc.getLexema()); 
                                
														
				tablaTipos = scopeManager.getCurrentScope().getTypeTable();
				tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();


				// Grabo parametros funcion
                // ListaObjetos parametros = new ListaObjetos(listaArg) 
				ArrayList parametros = new ArrayList(Utilidades.ordenaParametros(listaArg));
                                
        			for (int i=0; i<parametros.size(); i++){
                                    Parametro p = (Parametro) parametros.get(i);
                                    SymbolVariable simboloVar = new SymbolVariable (scopeManager.getCurrentScope(), p.getNombre(), p.getTipo(), despl);
                                    despl++;
                                    // Creo lista ordenada de parametros en el PROCEDIMIENTO.
                                    tipoProcedimiento.setTypeParametro(p.getColumna(),p.getTipo()); 
                                    // Fijar paso parametros Ref/Valor en Symbolvar
                                    simboloVar.setReferencia(p.getReferencia());
                                    tablaSimbolos.addSymbol(p.getNombre(),simboloVar);                                  	
                                    tipoProcedimiento.setParametro(simboloVar);
                                } 
							    LabelFactoryIF lf = CompilerContext.getLabelFactory();
                                LabelIF labelInicio = lf.create();
                                tipoProcedimiento.setEtiqSub(labelInicio);
                                LabelIF labelFin = lf.create();
                                tipoProcedimiento.setEtiqSubFin(labelFin);
                               
                                
                              }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // procedimiento ::= PROCEDURE ID PARENTESISIZQ lista_parametros PARENTESISDER IS NT$5 cabecera cuerpo 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token idProc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueSentencias bloque1 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                ScopeIF scope = scopeManager.getCurrentScope();
                                BloqueSentencias bloque = new BloqueSentencias();
                                IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
								List code1 = bloque1.getIntermediateCode();
								List code2 = bloque2.getIntermediateCode();
                                TypeProcedure tipoProc = (TypeProcedure) scopeManager.searchType(scope.getName());
                                cb.addQuadruple("INICIO_SUBPROG", tipoProc.getEtiqSub().getName());
                                cb.addQuadruples (code1);
								cb.addQuadruples (code2);
                                cb.addQuadruple("FIN_SUBPROG", tipoProc.getEtiqSub().getName(), tipoProc.getEtiqSubFin().getName(),new Value(tipoProc.getScope().getLevel()));
								List code=cb.create ();
								bloque.setIntermediateCode (code); 

                                // Cerramos Scope
                                desplScope.put(scope.getName(), new Integer(despl));
                                scopeManager.closeScope();

                                despl=((Integer)desplScope.get(scopeManager.getCurrentScope().getName())).intValue();
                                
                                semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
                                RESULT=bloque;
              

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$5 ::= 
            {
              BloqueSentencias RESULT =null;
		int idProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token idProc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

				semanticErrorManager.semanticInfo("PROCEDIMIENTO: "+idProc.getLexema()+" en la linea: "+idProc.getLine());
 				// el procedimiento ha sido declarado
                if (scopeManager.containsSymbol(idProc.getLexema())) {
					semanticErrorManager.semanticFatalError("350. El procediiento "+idProc.getLexema()+" en la linea: "+idProc.getLine()+" ya ha sido declarado");
                }else{ 
                                
					// Crear FUNCION en ambito
					ScopeIF scope = scopeManager.getCurrentScope();
	                TypeTableIF tablaTipos = scope.getTypeTable();
		  			SymbolTableIF tablaSimbolos = scope.getSymbolTable();
								
	                // a�adir funcion a TT
	                TypeProcedure tipoProcedimiento = new TypeProcedure(scope, idProc.getLexema());
					tablaTipos.addType(idProc.getLexema(), tipoProcedimiento);
								
					// a�adir funcion a TS
	                 SymbolProcedure simboloProc = new SymbolProcedure(scope,idProc.getLexema(),tablaTipos.getType(idProc.getLexema()));
					tablaSimbolos.addSymbol(idProc.getLexema(), simboloProc);
								
					// NUEVO ambito para funcion y tabla TS y TT
					scopeManager.openScope(idProc.getLexema()); 
	                                
															
					tablaTipos = scopeManager.getCurrentScope().getTypeTable();
					tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();


					// Grabo parametros funcion
	                // ListaObjetos parametros = new ListaObjetos(listaArg) 
					ArrayList parametros = new ArrayList(Utilidades.ordenaParametros(listaArg));
                                
        			for (int i=0; i<parametros.size(); i++){
                                    Parametro p = (Parametro) parametros.get(i);
                                    SymbolVariable simboloVar = new SymbolVariable (scopeManager.getCurrentScope(), p.getNombre(), p.getTipo(), despl);
                                    despl++;
                                    // Creo lista ordenada de parametros en el PROCEDIMIENTO.
                                    tipoProcedimiento.setTypeParametro(p.getColumna(),p.getTipo()); 
                                    // Fijar paso parametros Ref/Valor en Symbolvar
                                    simboloVar.setReferencia(p.getReferencia());
                                    tablaSimbolos.addSymbol(p.getNombre(),simboloVar);                                  	
                                    tipoProcedimiento.setParametro(simboloVar);
                                } 

                                LabelFactoryIF lf = CompilerContext.getLabelFactory();
                                LabelIF labelInicio = lf.create();
                                tipoProcedimiento.setEtiqSub(labelInicio);
                                LabelIF labelFin = lf.create();
                                tipoProcedimiento.setEtiqSubFin(labelFin);
                                
                              }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpoFuncion ::= BEGIN PUNTOYCOMA END ID PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		
				BloqueSentencias bloque = new BloqueSentencias();
				 RESULT=bloque;
					 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cuerpoFuncion ::= BEGIN listaSentencias PUNTOYCOMA END ID PUNTOYCOMA 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
				 RESULT=bloque;
					 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // funcion ::= FUNCTION ID error RETURN tipos IS cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
		syntaxErrorManager.syntaxFatalError("001. Faltan los DOS PARENTESIS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funcion ::= FUNCTION ID PARENTESISIZQ PARENTESISDER RETURN tipos IS NT$4 cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                BloqueSentencias bloque = new BloqueSentencias();
                IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
				List code2 = bloque2.getIntermediateCode();
                ScopeIF scope = scopeManager.getCurrentScope();
                TypeFunction tipoFuncion = (TypeFunction) scopeManager.searchType(scope.getName());
                cb.addQuadruple("INICIO_SUBPROG", tipoFuncion.getEtiqSub().getName());
				cb.addQuadruples (code2);
                cb.addQuadruple("FIN_SUBPROG", tipoFuncion.getEtiqSub().getName(), tipoFuncion.getEtiqSubFin().getName(),new Value(tipoFuncion.getScope().getLevel()));
				List code=cb.create();
				bloque.setIntermediateCode(code); 

                // Cerramos Scope
                desplScope.put(scope.getName(), new Integer(despl));
                scopeManager.closeScope();

                despl=((Integer)desplScope.get(scopeManager.getCurrentScope().getName())).intValue();
                // Comprobar que hay return de la funcion

                if  (! tipoFuncion.getHayRetorno())
                  semanticErrorManager.semanticFatalError("352. La funci�n "+tipoFuncion.getName()+" no tiene retorno"); 
                
                 semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
                RESULT=bloque2;
              

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$4 ::= 
            {
              BloqueSentencias RESULT =null;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

			semanticErrorManager.semanticInfo("FUNCION: "+idFunc.getLexema()+" en la linea: "+idFunc.getLine());
               
 				// la funcion ha sido declarada
             if (scopeManager.containsSymbol(idFunc.getLexema())) {
				semanticErrorManager.semanticFatalError("350. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" ya ha sido declarada");
             }else{ 
                                
				// Crear FUNCION en ambito
				ScopeIF scope = scopeManager.getCurrentScope();
                TypeTableIF tablaTipos = scope.getTypeTable();
	  			SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							
                // a�adir funcion a TT
                TypeFunction tipoFuncion = new TypeFunction(scope, idFunc.getLexema());
				tablaTipos.addType(idFunc.getLexema(), tipoFuncion);
							
				// a�adir funcion a TS
                SymbolFunction simboloFunc = new SymbolFunction(scope,idFunc.getLexema(),tablaTipos.getType(idFunc.getLexema()));
				tablaSimbolos.addSymbol(idFunc.getLexema(), simboloFunc);
							
				// NUEVO ambito para funcion y tabla TS y TT
				scopeManager.openScope(idFunc.getLexema()); 
                                
														
				tablaTipos = scopeManager.getCurrentScope().getTypeTable();
				tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();

                // Grabo tipo retorno
				tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));

				tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));
                tipoFuncion.setHayRetorno(true);
                LabelFactoryIF lf = CompilerContext.getLabelFactory();
                LabelIF labelInicio = lf.create();
                tipoFuncion.setEtiqSub(labelInicio);
                LabelIF labelFin = lf.create();
                tipoFuncion.setEtiqSubFin(labelFin); 
                               
                                
           }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funcion ::= FUNCTION ID PARENTESISIZQ lista_parametros PARENTESISDER RETURN tipos IS NT$3 cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                BloqueSentencias bloque = new BloqueSentencias();
                IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
				List code2 = bloque2.getIntermediateCode();
                ScopeIF scope = scopeManager.getCurrentScope();
                TypeFunction tipoFuncion = (TypeFunction) scopeManager.searchType(scope.getName());
                cb.addQuadruple("INICIO_SUBPROG", tipoFuncion.getEtiqSub().getName());
				
				 semanticErrorManager.semanticDebug("***CODE2: " +code2);
				
				cb.addQuadruples (code2);
                cb.addQuadruple("FIN_SUBPROG", tipoFuncion.getEtiqSub().getName(), tipoFuncion.getEtiqSubFin().getName(),new Value(tipoFuncion.getScope().getLevel()));
				List code=cb.create();
				bloque.setIntermediateCode(code); 

                // Cerramos Scope
                desplScope.put(scope.getName(), new Integer(despl));
                scopeManager.closeScope();

                despl=((Integer)desplScope.get(scopeManager.getCurrentScope().getName())).intValue();
                // Comprobar que hay return de la funcion

                if  (! tipoFuncion.getHayRetorno())
                  semanticErrorManager.semanticFatalError("352. La funci�n "+tipoFuncion.getName()+" no tiene retorno"); 
                
                 semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
                RESULT=bloque;
              

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$3 ::= 
            {
              BloqueSentencias RESULT =null;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

			semanticErrorManager.semanticInfo("FUNCION: "+idFunc.getLexema()+" en la linea: "+idFunc.getLine());
 				// la funcion ha sido declarada
            if (scopeManager.containsSymbol(idFunc.getLexema())) {
				semanticErrorManager.semanticFatalError("350. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" ya ha sido declarada");
           }else{ 
                                
				// Crear FUNCION en ambito
				ScopeIF scope = scopeManager.getCurrentScope();
                TypeTableIF tablaTipos = scope.getTypeTable();
	  			SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							
                // a�adir funcion a TT
                TypeFunction tipoFuncion = new TypeFunction(scope, idFunc.getLexema());
				tablaTipos.addType(idFunc.getLexema(), tipoFuncion);
							
				// a�adir funcion a TS
                SymbolFunction simboloFunc = new SymbolFunction(scope,idFunc.getLexema(),tablaTipos.getType(idFunc.getLexema()));
				tablaSimbolos.addSymbol(idFunc.getLexema(), simboloFunc);
							
				// NUEVO ambito para funcion y tabla TS y TT
				scopeManager.openScope(idFunc.getLexema()); 
                despl=5;                
														
				tablaTipos = scopeManager.getCurrentScope().getTypeTable();
				tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();

                // Grabo tipo retorno
				tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));

				// Grabo parametros funcion
                // ListaObjetos parametros = new ListaObjetos(listaArg) 
				ArrayList parametros = new ArrayList(Utilidades.ordenaParametros(listaArg));
                                
       			for (int i=0; i<parametros.size(); i++){
                                    Parametro p = (Parametro) parametros.get(i);
                                    SymbolVariable simboloVar = new SymbolVariable (scopeManager.getCurrentScope(), p.getNombre(), p.getTipo(),despl);
                                    despl++;
                                    // Creo lista ordenada de parametros en el PROCEDIMIENTO.
                                    tipoFuncion.setTypeParametro(p.getColumna(),p.getTipo()); 
                                    // Fijar paso parametros Ref/Valor en Symbolvar
                                    simboloVar.setReferencia(p.getReferencia());
                                    tablaSimbolos.addSymbol(p.getNombre(),simboloVar);                                  	
                                    tipoFuncion.setParametro(simboloVar);
                                } 
       
                tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));
                tipoFuncion.setHayRetorno(true);
                LabelFactoryIF lf = CompilerContext.getLabelFactory();
                LabelIF labelInicio = lf.create();
                tipoFuncion.setEtiqSub(labelInicio);
                LabelIF labelFin = lf.create();
                tipoFuncion.setEtiqSubFin(labelFin);        
              }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funcion ::= FUNCTION ID PARENTESISIZQ PARENTESISDER RETURN tipos IS NT$2 cabecera cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueSentencias bloque1 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                BloqueSentencias bloque = new BloqueSentencias();
				                IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
								List code1 = bloque1.getIntermediateCode();
								List code2 = bloque2.getIntermediateCode();
				                ScopeIF scope = scopeManager.getCurrentScope();
				                TypeFunction tipoFuncion = (TypeFunction) scopeManager.searchType(scope.getName());
				                cb.addQuadruple("INICIO_SUBPROG", tipoFuncion.getEtiqSub().getName());
								cb.addQuadruples (code1);
								cb.addQuadruples (code2);
				                cb.addQuadruple("FIN_SUBPROG", tipoFuncion.getEtiqSub().getName(), tipoFuncion.getEtiqSubFin().getName(),new Value(tipoFuncion.getScope().getLevel()));
								List code=cb.create();
								bloque.setIntermediateCode(code); 
				
				                // Cerramos Scope
				                desplScope.put(scope.getName(), new Integer(despl));
				                scopeManager.closeScope();
				
				                despl=((Integer)desplScope.get(scopeManager.getCurrentScope().getName())).intValue();
				                // Comprobar que hay return de la funcion
				
				                if  (! tipoFuncion.getHayRetorno())
				                  semanticErrorManager.semanticFatalError("352. La funci�n "+tipoFuncion.getName()+" no tiene retorno"); 
				               
				                semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
				                RESULT=bloque;
              

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              BloqueSentencias RESULT =null;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

			semanticErrorManager.semanticInfo("FUNCION: "+idFunc.getLexema()+" en la linea: "+idFunc.getLine());
 			// la funcion ha sido declarada
            if (scopeManager.containsSymbol(idFunc.getLexema())) {
				semanticErrorManager.semanticFatalError("350. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" ya ha sido declarada");
            }else{ 
                                
				// Crear FUNCION en ambito
				ScopeIF scope = scopeManager.getCurrentScope();
                TypeTableIF tablaTipos = scope.getTypeTable();
	  			SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							
                // a�adir funcion a TT
                TypeFunction tipoFuncion = new TypeFunction(scope, idFunc.getLexema());
				tablaTipos.addType(idFunc.getLexema(), tipoFuncion);
							
				// a�adir funcion a TS
                SymbolFunction simboloFunc = new SymbolFunction(scope,idFunc.getLexema(),tablaTipos.getType(idFunc.getLexema()));
				tablaSimbolos.addSymbol(idFunc.getLexema(), simboloFunc);
							
				// NUEVO ambito para funcion y tabla TS y TT
				scopeManager.openScope(idFunc.getLexema()); 
                                
														
				tablaTipos = scopeManager.getCurrentScope().getTypeTable();
				tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();

                // Grabo tipo retorno
                tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));
                tipoFuncion.setHayRetorno(true);
                LabelFactoryIF lf = CompilerContext.getLabelFactory();
                LabelIF labelInicio = lf.create();
                tipoFuncion.setEtiqSub(labelInicio);
                LabelIF labelFin = lf.create();
                tipoFuncion.setEtiqSubFin(labelFin);  
                               
            }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= FUNCTION ID PARENTESISIZQ lista_parametros PARENTESISDER RETURN tipos IS NT$1 cabecera cuerpoFuncion 
            {
              BloqueSentencias RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (BloqueSentencias) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueSentencias bloque1 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                BloqueSentencias bloque = new BloqueSentencias();
				                IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
								List code1 = bloque1.getIntermediateCode();
								List code2 = bloque2.getIntermediateCode();
				                ScopeIF scope = scopeManager.getCurrentScope();
				                TypeFunction tipoFuncion = (TypeFunction) scopeManager.searchType(scope.getName());
				                cb.addQuadruple("INICIO_SUBPROG", tipoFuncion.getEtiqSub().getName());
								cb.addQuadruples (code1);
								cb.addQuadruples (code2);
				                cb.addQuadruple("FIN_SUBPROG", tipoFuncion.getEtiqSub().getName(), tipoFuncion.getEtiqSubFin().getName(),new Value(tipoFuncion.getScope().getLevel()));
								List code=cb.create();
								bloque.setIntermediateCode(code); 
				
				                // Cerramos Scope
				                desplScope.put(scope.getName(), new Integer(despl));
				                scopeManager.closeScope();
				
				                despl=((Integer)desplScope.get(scopeManager.getCurrentScope().getName())).intValue();
				                // Comprobar que hay return de la funcion
				
				                if  (! tipoFuncion.getHayRetorno())
				                  semanticErrorManager.semanticFatalError("352. La funci�n "+tipoFuncion.getName()+" no tiene retorno"); 
				               
				                semanticErrorManager.semanticDebug(bloque.getIntermediateCode());
				                RESULT=bloque;
              

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$1 ::= 
            {
              BloqueSentencias RESULT =null;
		int idFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token idFunc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listaArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listaArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaObjetos listaArg = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

			semanticErrorManager.semanticInfo("FUNCION: "+idFunc.getLexema()+" en la linea: "+idFunc.getLine());
 				// la funcion ha sido declarada
            if (scopeManager.containsSymbol(idFunc.getLexema())) {
				semanticErrorManager.semanticFatalError("350. La funcion "+idFunc.getLexema()+" en la linea: "+idFunc.getLine()+" ya ha sido declarada");
            }else{ 
                                
				// Crear FUNCION en ambito
				ScopeIF scope = scopeManager.getCurrentScope();
                TypeTableIF tablaTipos = scope.getTypeTable();
	  			SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							
                // a�adir funcion a TT
                TypeFunction tipoFuncion = new TypeFunction(scope, idFunc.getLexema());
				tablaTipos.addType(idFunc.getLexema(), tipoFuncion);
							
				// a�adir funcion a TS
                SymbolFunction simboloFunc = new SymbolFunction(scope,idFunc.getLexema(),tablaTipos.getType(idFunc.getLexema()));
				tablaSimbolos.addSymbol(idFunc.getLexema(), simboloFunc);
							
				// NUEVO ambito para funcion y tabla TS y TT
				scopeManager.openScope(idFunc.getLexema());             
														
				tablaTipos = scopeManager.getCurrentScope().getTypeTable();
				tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();

                // Grabo tipo retorno
				tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));

				// Grabo parametros funcion
                // ListaObjetos parametros = new ListaObjetos(listaArg) 
				ArrayList parametros = new ArrayList(Utilidades.ordenaParametros(listaArg));
                                
        			for (int i=0; i<parametros.size(); i++){
                                    Parametro p = (Parametro) parametros.get(i);
                                    SymbolVariable simboloVar = new SymbolVariable (scopeManager.getCurrentScope(), p.getNombre(), p.getTipo(),despl);
                                    despl++;
                                    // Creo lista ordenada de parametros en el PROCEDIMIENTO.
                                    tipoFuncion.setTypeParametro(p.getColumna(),p.getTipo()); 
                                    // Fijar paso parametros Ref/Valor en Symbolvar
                                    simboloVar.setReferencia(p.getReferencia());
                                    tablaSimbolos.addSymbol(p.getNombre(),simboloVar);                                  	
                                    tipoFuncion.setParametro(simboloVar);
                                } 
       
                // Grabo tipo retorno
                tipoFuncion.setTipoRetorno(scopeManager.searchType(tp.toString()));
                tipoFuncion.setHayRetorno(true);
                LabelFactoryIF lf = CompilerContext.getLabelFactory();
                LabelIF labelInicio = lf.create();
                tipoFuncion.setEtiqSub(labelInicio);
                LabelIF labelFin = lf.create();
                tipoFuncion.setEtiqSubFin(labelFin);  
                               
                                
            }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionSubPrograma ::= funcion 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=bloque; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubPrograma",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionSubPrograma ::= procedimiento 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=bloque; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubPrograma",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionVariable ::= decVariable ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaObjetos list = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tableSymbol=scope.getSymbolTable();
	TypeTableIF tableType=scope.getTypeTable();

	//Añadir el tipo de variable a la lista
	ListaObjetos var=new ListaObjetos(list);
	
	semanticErrorManager.semanticInfo("Lista variables: "+var.size());
	
	for(int i=var.size()-1; i>=0;i--){
		Var v=(Var)var.get(i);
		//Comprobar que no esté definido el mismo ámbito
		if(!scope.getSymbolTable().containsSymbol(v.getName())){
			SymbolVariable symbolVariable=new SymbolVariable(scope, v.getName(),scopeManager.searchType(type.getLexema()),despl);
			tableSymbol.addSymbol(v.getName(),symbolVariable);
			if(tableType.getType(type.getLexema()) instanceof TypeArray){
				TypeArray typeArray = (TypeArray) symbolVariable.getType();
				despl=despl+typeArray.getSize();
			}
		}else{
			semanticErrorManager.semanticFatalError("La variable "+v.getName()+" en la linea "+v.getLine()+" y columna "+v.getColumn()+" ya ha sido declarada");
		}
	}
	if(!scopeManager.containsType(type.getLexema())){
		semanticErrorManager.semanticFatalError("La variable "+type.getLexema()+" en la linea "+type.getLine()+" y columna "+type.getColumn()+" no ha sido declarada");
	}else{
		TypeIF typeIf=scopeManager.searchType(type.getLexema());
		if( !(typeIf instanceof TypeArray)){
			semanticErrorManager.semanticFatalError("La variable "+type.getLexema()+" en la linea "+type.getLine()+" y columna "+type.getColumn()+" no es del tipo RECORD/ARRAY");
		}
	}	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionVariable ::= decVariable BOOLEAN PUNTOYCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaObjetos list = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tableSymbol=scope.getSymbolTable();
	
	//Añadir el tipo de variable a la lista
	ListaObjetos var=new ListaObjetos(list);
	for(int i=var.size()-1; i>=0;i--){
		Var v=(Var)var.get(i);
		//Comprobar que no esté definido el mismo ámbito
		if(!scope.getSymbolTable().containsSymbol(v.getName())){
			SymbolVariable symbolVariable=new SymbolVariable(scope, v.getName(), scopeManager.searchType("BOOLEAN"),despl);
			tableSymbol.addSymbol(v.getName(),symbolVariable);
			despl++;
		}else{
			semanticErrorManager.semanticFatalError("La variable "+v.getName()+" en la linea "+v.getLine()+" y columna "+v.getColumn()+" ya ha sido declarada");
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionVariable ::= decVariable INTEGER PUNTOYCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaObjetos list = (ListaObjetos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tableSymbol=scope.getSymbolTable();

	//Añadir el tipo de variable a la lista
	ListaObjetos var=new ListaObjetos(list);
	for(int i=var.size()-1; i>=0;i--){
		Var v=(Var)var.get(i);
		//Comprobar que no esté definido el mismo ámbito
		if(!scope.getSymbolTable().containsSymbol(v.getName())){
			SymbolVariable symbolVariable=new SymbolVariable(scope, v.getName(), scopeManager.searchType("INTEGER"),despl);
			tableSymbol.addSymbol(v.getName(),symbolVariable);
			 despl++;
		}else{
			semanticErrorManager.semanticFatalError("La variable "+v.getName()+" en la linea "+v.getLine()+" y columna "+v.getColumn()+" ya ha sido declarada");
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionTipo ::= TYPE ID IS ARRAY PARENTESISIZQ ENTERO PUNTOPUNTO ENTERO PARENTESISDER OF ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token value1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token value2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token typeId = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si el tipo está declarado en el ambito --> error: ya ha sido declarado
	//si no --> declararlo	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" ya ha sido declarado");
	}else{
		TypeTableIF tableType=scope.getTypeTable();
		TypeArray typeArray =new TypeArray (scope, name);
		typeArray.setValIni (Integer.parseInt(value1.getLexema()));
		typeArray.setValFin (Integer.parseInt(value2.getLexema()));
		typeArray.setTipo (scopeManager.searchType(typeId.getLexema()));
		tableType.addType(name,typeArray);
		TypeIF typeVar=scopeManager.searchType(typeId.getLexema());
		if(!(typeVar instanceof TypeRecord) && !(typeVar instanceof TypeArray)){
			semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" no es del tipo RECORD/ARRAY");
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionTipo ::= TYPE ID IS ARRAY PARENTESISIZQ ENTERO PUNTOPUNTO ENTERO PARENTESISDER OF BOOLEAN PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token value1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token value2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si el tipo está declarado en el ambito --> error: ya ha sido declarado
	//si no --> declararlo	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" ya ha sido declarado");
	}else{
		TypeTableIF tableType=scope.getTypeTable();
		TypeArray typeArray =new TypeArray (scope, name);
		typeArray.setValIni (Integer.parseInt(value1.getLexema()));
		typeArray.setValFin (Integer.parseInt(value2.getLexema()));
		typeArray.setTipo (scopeManager.searchType("BOOLEAN"));
		tableType.addType(name,typeArray);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionTipo ::= TYPE ID IS ARRAY PARENTESISIZQ ENTERO PUNTOPUNTO ENTERO PARENTESISDER OF INTEGER PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token value1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token value2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si el tipo está declarado en el ambito --> error: ya ha sido declarado
	//si no --> declararlo	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("El TIPO "+name+" en la linea "+id.getLine()+" y columna "+id.getColumn()+" ya ha sido declarado");
	}else{
		TypeTableIF tableType=scope.getTypeTable();
		TypeArray typeArray =new TypeArray (scope, name);
		typeArray.setValIni (Integer.parseInt(value1.getLexema()));
		typeArray.setValFin (Integer.parseInt(value2.getLexema()));
		typeArray.setTipo (scopeManager.searchType("INTEGER"));
		tableType.addType(name,typeArray);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracionConstanteSimbolica ::= ID DOSPUNTOS CONSTANT ASIGNACION tipoBooleano PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String name=id.getLexema();
	ScopeIF scope = scopeManager.getCurrentScope();

	//si la cte está declarada en el ambito --> error: ya ha sido declarada
	//si no --> declararla	
	if(scope.getSymbolTable().containsSymbol(name)){
		semanticErrorManager.semanticFatalError("La CONSTANTE "+name+" en la linea "+id.getLine()+" ya ha sido declarada");
	}else{
		SymbolTableIF tableSymbol=scope.getSymbolTable();
		SymbolConstant constantSymbol=new SymbolConstant(scope,name, scopeManager.searchType("BOOLEAN"));
		if (valor.getLexema().equalsIgnoreCase("true")) 
			constantSymbol.setValue(1);
		else 
			constantSymbol.setValue(0);
		tableSymbol.addSymbol(name,constantSymbol);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstanteSimbolica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionConstanteSimbolica ::= ID DOSPUNTOS CONSTANT ASIGNACION ENTERO PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String name=id.getLexema();
	SymbolTableIF sTable=scopeManager.getCurrentScope().getSymbolTable();
	
	//si la cte está declarada en el ambito --> error: ya ha sido declarada
	//si no --> declararla	
	if(sTable.containsSymbol(name)){
		semanticErrorManager.semanticFatalError("La CONSTANTE "+name+" en la linea "+id.getLine()+" ya ha sido declarada");
	}else{
		SymbolConstant sc= new SymbolConstant (scopeManager.getCurrentScope(),name,scopeManager.searchType("INTEGER"),despl);
		sTable.addSymbol(name,sc);
		sc.setValue(Integer.parseInt(value.getLexema()));
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstanteSimbolica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // seccionSubProgramas ::= declaracionSubPrograma seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueSentencias bloque1 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque2 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                BloqueSentencias bloque = new BloqueSentencias();
                                IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
								List code1 = bloque1.getIntermediateCode();
								List code2 = bloque2.getIntermediateCode();
								cb.addQuadruples (code1);
								cb.addQuadruples (code2);
								List code=cb.create ();
								bloque.setIntermediateCode (code); 
                                
                                RESULT=bloque;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubProgramas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // seccionSubProgramas ::= declaracionSubPrograma 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubProgramas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              Object RESULT =null;
		
                                desplScope.put(scopeManager.getCurrentScope().getName(),despl); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // seccionVariables ::= declaracionVariable 
            {
              Object RESULT =null;
		
                                desplScope.put(scopeManager.getCurrentScope().getName(),despl); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seccionTipos ::= seccionTipos declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // seccionTipos ::= declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // seccionConstantesSimbolicas ::= seccionConstantesSimbolicas declaracionConstanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantesSimbolicas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // seccionConstantesSimbolicas ::= declaracionConstanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantesSimbolicas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cabecera ::= seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cabecera ::= seccionVariables 
            {
              BloqueSentencias RESULT =null;
		
								BloqueSentencias bloque=new BloqueSentencias();
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cabecera ::= seccionVariables seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cabecera ::= seccionTipos 
            {
              BloqueSentencias RESULT =null;
		
								BloqueSentencias bloque=new BloqueSentencias();
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cabecera ::= seccionTipos seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cabecera ::= seccionTipos seccionVariables 
            {
              BloqueSentencias RESULT =null;
		
								BloqueSentencias bloque=new BloqueSentencias();
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cabecera ::= seccionTipos seccionVariables seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cabecera ::= seccionConstantesSimbolicas 
            {
              BloqueSentencias RESULT =null;
		
								BloqueSentencias bloque=new BloqueSentencias();
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cabecera ::= seccionConstantesSimbolicas seccionVariables 
            {
              BloqueSentencias RESULT =null;
		
								BloqueSentencias bloque=new BloqueSentencias();
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera ::= seccionConstantesSimbolicas seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cabecera ::= seccionConstantesSimbolicas seccionTipos seccionVariables 
            {
              BloqueSentencias RESULT =null;
		
								BloqueSentencias bloque=new BloqueSentencias();
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cabecera ::= seccionConstantesSimbolicas seccionTipos seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cabecera ::= seccionConstantesSimbolicas seccionVariables seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cabecera ::= seccionConstantesSimbolicas seccionTipos seccionVariables seccionSubProgramas 
            {
              BloqueSentencias RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=bloque; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // procedure ::= PROCEDURE error 
            {
              BloqueSentencias RESULT =null;
		syntaxErrorManager.syntaxFatalError("002. Error en el nombre del programa");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // procedure ::= PROCEDURE ID 
            {
              BloqueSentencias RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	String name=id.getLexema();
	scopeManager.openScope(name);
	
	//Insertar todos los TypesSimple en la TT
	ScopeIF scope = scopeManager.getCurrentScope();
	TypeTableIF tableTypes =scope.getTypeTable();
	TypeInteger typeInteger = new TypeInteger(scope);
	TypeBoolean typeBoolean = new TypeBoolean(scope);
	TypeArray typeArray = new TypeArray(scope);
	tableTypes.addType(typeInteger);
	tableTypes.addType(typeBoolean);
	tableTypes.addType(typeArray);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom ::= ID error PARENTESISIZQ PARENTESISDER IS cabecera cuerpo 
            {
              Axiom RESULT =null;
		syntaxErrorManager.syntaxFatalError("003. Palabra PROCEDURE no definida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= procedure error PARENTESISIZQ PARENTESISDER IS cabecera cuerpo 
            {
              Axiom RESULT =null;
		syntaxErrorManager.syntaxFatalError("001. No se ha especificado nombre del progama");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= procedure PARENTESISIZQ PARENTESISDER IS cuerpo 
            {
              Axiom RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            // Creamos el codigo CI de todo el arbol
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());   

                            cb.addQuadruples(bloque.getIntermediateCode());

                            List code = cb.create();
                            Axiom ax = new Axiom();
                            ax.setIntermediateCode(code);
                            			
                            semanticErrorManager.semanticDebug(ax.getIntermediateCode());
                            RESULT=ax;
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= procedure PARENTESISIZQ PARENTESISDER IS cabecera cuerpo 
            {
              Axiom RESULT =null;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueSentencias bloque1 = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueSentencias bloque = (BloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  
                            // Creamos el codigo CI de todo el arbol
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());                               

							cb.addQuadruples(bloque1.getIntermediateCode());
                            cb.addQuadruples(bloque.getIntermediateCode());

                            List code = cb.create();
                            Axiom ax = new Axiom();
                            ax.setIntermediateCode(code);
                            			
                            semanticErrorManager.semanticDebug(ax.getIntermediateCode());
                            RESULT=ax;
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden anadir mas acciones semanticas
  		// Comentar estas lineas para el 1er cuatrimestre
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		

         ScopeIF scope = scopeManager.getCurrentScope();
         Variable var = new Variable(scopeManager.getCurrentScope().getName(),scope); 
				
         desplScope.put(scopeManager.getCurrentScope().getName(), new Integer(despl));
         var.setTablaDespl(desplScope);
                              		
  		 IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
  		 cb.addQuadruple ("INICIO_PROGRAMA", var, new Value(despl));
  		 
  		 List intermediateCode = ax.getIntermediateCode ();
		 
  		 cb.addQuadruples (intermediateCode);
         cb.addQuadruple ("FIN_PROGRAMA",null);
         
         // ponemos todas las cadena al final del programa
         int i=1;
         cb.addQuadruple ("CADENA", "cadena0","\"\\n\"", "");
         for (Iterator it = cadenas.iterator(); it.hasNext();i++){
              String nombre="cadena"+i;
              cb.addQuadruple ("CADENA", nombre,it.next(), "");
         }
         
         /*
                  int i=1;
         cb.addQuadruple ("CADENA", "","\"\\n\"", "");
         for (Iterator it = cadenas.iterator(); it.hasNext();i++){
              
              cb.addQuadruple ("CADENA", "",it.next(), "");
         }*/
  		 
  		 finalCodeFactory.setEnvironment(CompilerContext.getExecutionEnvironment());
  		 finalCodeFactory.create(cb.create());

         List code = cb.create();
		 ax.setIntermediateCode(code);
		 
		 semanticErrorManager.semanticDebug(ax.getIntermediateCode());
  		
  		 syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

